/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IGOBoxInterface extends ethers.utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "OWNER_ROLE()": FunctionFragment;
        "addBoxType(string,uint256,uint256,string)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "buy(uint256,bytes32[],address)": FunctionFragment;
        "claim(uint256,tuple,bytes)": FunctionFragment;
        "forceReturnERC20(address,uint256,address)": FunctionFragment;
        "forceReturnERC721(address,address,uint256)": FunctionFragment;
        "forceReturnNative(uint256,address)": FunctionFragment;
        "getApproved(uint256)": FunctionFragment;
        "getBought(address)": FunctionFragment;
        "getBoxTypes()": FunctionFragment;
        "getInfo()": FunctionFragment;
        "getNextBuyTime(address)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "isApprovedForAll(address,address)": FunctionFragment;
        "mintMany(address,uint256,uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "ownerOf(uint256)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "safeTransferFrom(address,address,uint256)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "setInfo(address,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
        "setSlimeNFT(address)": FunctionFragment;
        "setWhitelist(bytes32,string)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "symbol()": FunctionFragment;
        "toggleBoxType(uint256)": FunctionFragment;
        "tokenURI(uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "typeOf(uint256)": FunctionFragment;
        "updateTokenUri(uint256,string)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "OWNER_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "addBoxType",
        values: [string, BigNumberish, BigNumberish, string]
    ): string;
    encodeFunctionData(
        functionFragment: "approve",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(
        functionFragment: "buy",
        values: [BigNumberish, BytesLike[], string]
    ): string;
    encodeFunctionData(
        functionFragment: "claim",
        values: [
            BigNumberish,
            {
                name: string;
                firstOwner: string;
                purity: boolean;
                blessed: BigNumberish;
                stellarUnlock: BigNumberish;
                markD: BigNumberish;
                markR: BigNumberish;
                faceD: BigNumberish;
                faceR: BigNumberish;
                wingsD: BigNumberish;
                wingsR: BigNumberish;
                bodyD: BigNumberish;
                bodyR: BigNumberish;
                upHeadD: BigNumberish;
                upHeadR: BigNumberish;
                siteHeadD: BigNumberish;
                siteHeadR: BigNumberish;
                tailD: BigNumberish;
                tailR: BigNumberish;
                breedCount: BigNumberish;
                essenceBreedCount: BigNumberish;
                parent1Id: BigNumberish;
                parent2Id: BigNumberish;
                lastBreed: BigNumberish;
                birthTime: BigNumberish;
            },
            BytesLike
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "forceReturnERC20",
        values: [string, BigNumberish, string]
    ): string;
    encodeFunctionData(
        functionFragment: "forceReturnERC721",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "forceReturnNative",
        values: [BigNumberish, string]
    ): string;
    encodeFunctionData(
        functionFragment: "getApproved",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "getBought", values: [string]): string;
    encodeFunctionData(
        functionFragment: "getBoxTypes",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getNextBuyTime",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleAdmin",
        values: [BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "isApprovedForAll",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "mintMany",
        values: [string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "ownerOf",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "safeTransferFrom",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setApprovalForAll",
        values: [string, boolean]
    ): string;
    encodeFunctionData(
        functionFragment: "setInfo",
        values: [
            string,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            boolean
        ]
    ): string;
    encodeFunctionData(functionFragment: "setSlimeNFT", values: [string]): string;
    encodeFunctionData(
        functionFragment: "setWhitelist",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "supportsInterface",
        values: [BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "toggleBoxType",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "tokenURI",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "transferFrom",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "typeOf",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "updateTokenUri",
        values: [BigNumberish, string]
    ): string;

    decodeFunctionResult(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addBoxType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "forceReturnERC20",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "forceReturnERC721",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "forceReturnNative",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getApproved",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getBought", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getBoxTypes",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getNextBuyTime",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleAdmin",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "isApprovedForAll",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "mintMany", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "renounceRole",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "safeTransferFrom",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setApprovalForAll",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "setSlimeNFT",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setWhitelist",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "supportsInterface",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "toggleBoxType",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "transferFrom",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "typeOf", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "updateTokenUri",
        data: BytesLike
    ): Result;

    events: {
        "Approval(address,address,uint256)": EventFragment;
        "ApprovalForAll(address,address,bool)": EventFragment;
        "Burned(uint256,address,uint256)": EventFragment;
        "Minted(uint256,address,string)": EventFragment;
        "NewBoxType(uint256,string,uint256,uint256,string)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetInfo(address,uint256,uint256,uint256,uint256,bool)": EventFragment;
        "SetSlime(address)": EventFragment;
        "SetWhitelist(bytes32,string)": EventFragment;
        "Sold(uint256,uint256,uint256,address,address)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
        "UpdateTokenUri(uint256,string)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewBoxType"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetInfo"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSlime"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWhitelist"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateTokenUri"): EventFragment;
}

export class IGOBox extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: IGOBoxInterface;

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

        addBoxType(
            name: string,
            limit: BigNumberish,
            price: BigNumberish,
            prefixUri: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        approve(
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        buy(
            boxTypeId: BigNumberish,
            merkleProof: BytesLike[],
            agency: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        claim(
            boxId: BigNumberish,
            slimeInfo: {
                name: string;
                firstOwner: string;
                purity: boolean;
                blessed: BigNumberish;
                stellarUnlock: BigNumberish;
                markD: BigNumberish;
                markR: BigNumberish;
                faceD: BigNumberish;
                faceR: BigNumberish;
                wingsD: BigNumberish;
                wingsR: BigNumberish;
                bodyD: BigNumberish;
                bodyR: BigNumberish;
                upHeadD: BigNumberish;
                upHeadR: BigNumberish;
                siteHeadD: BigNumberish;
                siteHeadR: BigNumberish;
                tailD: BigNumberish;
                tailR: BigNumberish;
                breedCount: BigNumberish;
                essenceBreedCount: BigNumberish;
                parent1Id: BigNumberish;
                parent2Id: BigNumberish;
                lastBreed: BigNumberish;
                birthTime: BigNumberish;
            },
            signature: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        forceReturnERC20(
            token: string,
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        forceReturnERC721(
            sendTo: string,
            token: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        forceReturnNative(
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        getApproved(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        getBought(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        getBoxTypes(
            overrides?: CallOverrides
        ): Promise<
            [
                ([
                    boolean,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    BigNumber,
                    string,
                    string
                ] & {
                    isActive: boolean;
                    boxTypeId: BigNumber;
                    sellLimit: BigNumber;
                    sold: BigNumber;
                    price: BigNumber;
                    name: string;
                    prefixUri: string;
                })[]
            ] & {
            types: ([
                boolean,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                string,
                string
            ] & {
                isActive: boolean;
                boxTypeId: BigNumber;
                sellLimit: BigNumber;
                sold: BigNumber;
                price: BigNumber;
                name: string;
                prefixUri: string;
            })[];
        }
            >;

        getInfo(
            overrides?: CallOverrides
        ): Promise<
            [
                    [
                        boolean,
                        string,
                        string,
                        string,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber
                    ] & {
                    checkWhitelist: boolean;
                    merkleRoot: string;
                    CID: string;
                    currency: string;
                    limitPerUser: BigNumber;
                    startTime: BigNumber;
                    endTime: BigNumber;
                    sellLimit: BigNumber;
                    sold: BigNumber;
                    preventTime: BigNumber;
                }
            ]
            >;

        getNextBuyTime(
            user: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        isApprovedForAll(
            owner: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        mintMany(
            recipient: string,
            quantity: BigNumberish,
            _type: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        name(overrides?: CallOverrides): Promise<[string]>;

        ownerOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "safeTransferFrom(address,address,uint256)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setInfo(
            currency: string,
            sellLimit: BigNumberish,
            limitPerUser: BigNumberish,
            preventTime: BigNumberish,
            startTime: BigNumberish,
            endTime: BigNumberish,
            checkWhitelist: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setSlimeNFT(
            slime: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setWhitelist(
            merkleRoot: BytesLike,
            CID: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        toggleBoxType(
            boxTypeId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        tokenURI(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        transferFrom(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        typeOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        updateTokenUri(
            itemType: BigNumberish,
            uri: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    addBoxType(
        name: string,
        limit: BigNumberish,
        price: BigNumberish,
        prefixUri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buy(
        boxTypeId: BigNumberish,
        merkleProof: BytesLike[],
        agency: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
        boxId: BigNumberish,
        slimeInfo: {
            name: string;
            firstOwner: string;
            purity: boolean;
            blessed: BigNumberish;
            stellarUnlock: BigNumberish;
            markD: BigNumberish;
            markR: BigNumberish;
            faceD: BigNumberish;
            faceR: BigNumberish;
            wingsD: BigNumberish;
            wingsR: BigNumberish;
            bodyD: BigNumberish;
            bodyR: BigNumberish;
            upHeadD: BigNumberish;
            upHeadR: BigNumberish;
            siteHeadD: BigNumberish;
            siteHeadR: BigNumberish;
            tailD: BigNumberish;
            tailR: BigNumberish;
            breedCount: BigNumberish;
            essenceBreedCount: BigNumberish;
            parent1Id: BigNumberish;
            parent2Id: BigNumberish;
            lastBreed: BigNumberish;
            birthTime: BigNumberish;
        },
        signature: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceReturnERC20(
        token: string,
        amount: BigNumberish,
        sendTo: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceReturnERC721(
        sendTo: string,
        token: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceReturnNative(
        amount: BigNumberish,
        sendTo: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
    ): Promise<string>;

    getBought(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBoxTypes(
        overrides?: CallOverrides
    ): Promise<
        ([boolean, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
            isActive: boolean;
            boxTypeId: BigNumber;
            sellLimit: BigNumber;
            sold: BigNumber;
            price: BigNumber;
            name: string;
            prefixUri: string;
        })[]
        >;

    getInfo(
        overrides?: CallOverrides
    ): Promise<
        [
            boolean,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
        checkWhitelist: boolean;
        merkleRoot: string;
        CID: string;
        currency: string;
        limitPerUser: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        sellLimit: BigNumber;
        sold: BigNumber;
        preventTime: BigNumber;
    }
        >;

    getNextBuyTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
    ): Promise<boolean>;

    mintMany(
        recipient: string,
        quantity: BigNumberish,
        _type: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInfo(
        currency: string,
        sellLimit: BigNumberish,
        limitPerUser: BigNumberish,
        preventTime: BigNumberish,
        startTime: BigNumberish,
        endTime: BigNumberish,
        checkWhitelist: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlimeNFT(
        slime: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
        merkleRoot: BytesLike,
        CID: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleBoxType(
        boxTypeId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    typeOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateTokenUri(
        itemType: BigNumberish,
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

        addBoxType(
            name: string,
            limit: BigNumberish,
            price: BigNumberish,
            prefixUri: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        approve(
            to: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

        buy(
            boxTypeId: BigNumberish,
            merkleProof: BytesLike[],
            agency: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        claim(
            boxId: BigNumberish,
            slimeInfo: {
                name: string;
                firstOwner: string;
                purity: boolean;
                blessed: BigNumberish;
                stellarUnlock: BigNumberish;
                markD: BigNumberish;
                markR: BigNumberish;
                faceD: BigNumberish;
                faceR: BigNumberish;
                wingsD: BigNumberish;
                wingsR: BigNumberish;
                bodyD: BigNumberish;
                bodyR: BigNumberish;
                upHeadD: BigNumberish;
                upHeadR: BigNumberish;
                siteHeadD: BigNumberish;
                siteHeadR: BigNumberish;
                tailD: BigNumberish;
                tailR: BigNumberish;
                breedCount: BigNumberish;
                essenceBreedCount: BigNumberish;
                parent1Id: BigNumberish;
                parent2Id: BigNumberish;
                lastBreed: BigNumberish;
                birthTime: BigNumberish;
            },
            signature: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        forceReturnERC20(
            token: string,
            amount: BigNumberish,
            sendTo: string,
            overrides?: CallOverrides
        ): Promise<void>;

        forceReturnERC721(
            sendTo: string,
            token: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        forceReturnNative(
            amount: BigNumberish,
            sendTo: string,
            overrides?: CallOverrides
        ): Promise<void>;

        getApproved(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<string>;

        getBought(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        getBoxTypes(
            overrides?: CallOverrides
        ): Promise<
            ([boolean, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
                isActive: boolean;
                boxTypeId: BigNumber;
                sellLimit: BigNumber;
                sold: BigNumber;
                price: BigNumber;
                name: string;
                prefixUri: string;
            })[]
            >;

        getInfo(
            overrides?: CallOverrides
        ): Promise<
            [
                boolean,
                string,
                string,
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
            ] & {
            checkWhitelist: boolean;
            merkleRoot: string;
            CID: string;
            currency: string;
            limitPerUser: BigNumber;
            startTime: BigNumber;
            endTime: BigNumber;
            sellLimit: BigNumber;
            sold: BigNumber;
            preventTime: BigNumber;
        }
            >;

        getNextBuyTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<boolean>;

        isApprovedForAll(
            owner: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<boolean>;

        mintMany(
            recipient: string,
            quantity: BigNumberish,
            _type: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        name(overrides?: CallOverrides): Promise<string>;

        ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>;

        "safeTransferFrom(address,address,uint256)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            _data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: CallOverrides
        ): Promise<void>;

        setInfo(
            currency: string,
            sellLimit: BigNumberish,
            limitPerUser: BigNumberish,
            preventTime: BigNumberish,
            startTime: BigNumberish,
            endTime: BigNumberish,
            checkWhitelist: boolean,
            overrides?: CallOverrides
        ): Promise<boolean>;

        setSlimeNFT(slime: string, overrides?: CallOverrides): Promise<void>;

        setWhitelist(
            merkleRoot: BytesLike,
            CID: string,
            overrides?: CallOverrides
        ): Promise<void>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<boolean>;

        symbol(overrides?: CallOverrides): Promise<string>;

        toggleBoxType(
            boxTypeId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

        transferFrom(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        typeOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        updateTokenUri(
            itemType: BigNumberish,
            uri: string,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        Approval(
            owner?: string | null,
            approved?: string | null,
            tokenId?: BigNumberish | null
        ): TypedEventFilter<
            [string, string, BigNumber],
            { owner: string; approved: string; tokenId: BigNumber }
            >;

        ApprovalForAll(
            owner?: string | null,
            operator?: string | null,
            approved?: null
        ): TypedEventFilter<
            [string, string, boolean],
            { owner: string; operator: string; approved: boolean }
            >;

        Burned(
            boxId?: null,
            player?: null,
            slimeItemId?: null
        ): TypedEventFilter<
            [BigNumber, string, BigNumber],
            { boxId: BigNumber; player: string; slimeItemId: BigNumber }
            >;

        Minted(
            itemId?: null,
            recipient?: null,
            tokenURI?: null
        ): TypedEventFilter<
            [BigNumber, string, string],
            { itemId: BigNumber; recipient: string; tokenURI: string }
            >;

        NewBoxType(
            boxTypeId?: null,
            name?: null,
            limit?: null,
            price?: null,
            prefixUri?: null
        ): TypedEventFilter<
            [BigNumber, string, BigNumber, BigNumber, string],
            {
                boxTypeId: BigNumber;
                name: string;
                limit: BigNumber;
                price: BigNumber;
                prefixUri: string;
            }
            >;

        RoleAdminChanged(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; previousAdminRole: string; newAdminRole: string }
            >;

        RoleGranted(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
            >;

        RoleRevoked(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
            >;

        SetInfo(
            currency?: null,
            sellLimit?: null,
            limitPerUser?: null,
            startTime?: null,
            endTime?: null,
            checkWhitelist?: null
        ): TypedEventFilter<
            [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
            {
                currency: string;
                sellLimit: BigNumber;
                limitPerUser: BigNumber;
                startTime: BigNumber;
                endTime: BigNumber;
                checkWhitelist: boolean;
            }
            >;

        SetSlime(slimeNft?: null): TypedEventFilter<[string], { slimeNft: string }>;

        SetWhitelist(
            merkleRoot?: null,
            CID?: null
        ): TypedEventFilter<[string, string], { merkleRoot: string; CID: string }>;

        Sold(
            newItemId?: null,
            boxTypeId?: null,
            price?: null,
            user?: null,
            agency?: null
        ): TypedEventFilter<
            [BigNumber, BigNumber, BigNumber, string, string],
            {
                newItemId: BigNumber;
                boxTypeId: BigNumber;
                price: BigNumber;
                user: string;
                agency: string;
            }
            >;

        Transfer(
            from?: string | null,
            to?: string | null,
            tokenId?: BigNumberish | null
        ): TypedEventFilter<
            [string, string, BigNumber],
            { from: string; to: string; tokenId: BigNumber }
            >;

        UpdateTokenUri(
            itemType?: null,
            uri?: null
        ): TypedEventFilter<
            [BigNumber, string],
            { itemType: BigNumber; uri: string }
            >;
    };

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        addBoxType(
            name: string,
            limit: BigNumberish,
            price: BigNumberish,
            prefixUri: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        approve(
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

        buy(
            boxTypeId: BigNumberish,
            merkleProof: BytesLike[],
            agency: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        claim(
            boxId: BigNumberish,
            slimeInfo: {
                name: string;
                firstOwner: string;
                purity: boolean;
                blessed: BigNumberish;
                stellarUnlock: BigNumberish;
                markD: BigNumberish;
                markR: BigNumberish;
                faceD: BigNumberish;
                faceR: BigNumberish;
                wingsD: BigNumberish;
                wingsR: BigNumberish;
                bodyD: BigNumberish;
                bodyR: BigNumberish;
                upHeadD: BigNumberish;
                upHeadR: BigNumberish;
                siteHeadD: BigNumberish;
                siteHeadR: BigNumberish;
                tailD: BigNumberish;
                tailR: BigNumberish;
                breedCount: BigNumberish;
                essenceBreedCount: BigNumberish;
                parent1Id: BigNumberish;
                parent2Id: BigNumberish;
                lastBreed: BigNumberish;
                birthTime: BigNumberish;
            },
            signature: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        forceReturnERC20(
            token: string,
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        forceReturnERC721(
            sendTo: string,
            token: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        forceReturnNative(
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        getApproved(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getBought(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        getBoxTypes(overrides?: CallOverrides): Promise<BigNumber>;

        getInfo(overrides?: CallOverrides): Promise<BigNumber>;

        getNextBuyTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isApprovedForAll(
            owner: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        mintMany(
            recipient: string,
            quantity: BigNumberish,
            _type: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        ownerOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "safeTransferFrom(address,address,uint256)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setInfo(
            currency: string,
            sellLimit: BigNumberish,
            limitPerUser: BigNumberish,
            preventTime: BigNumberish,
            startTime: BigNumberish,
            endTime: BigNumberish,
            checkWhitelist: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setSlimeNFT(
            slime: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setWhitelist(
            merkleRoot: BytesLike,
            CID: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        toggleBoxType(
            boxTypeId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        tokenURI(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        transferFrom(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        typeOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        updateTokenUri(
            itemType: BigNumberish,
            uri: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        addBoxType(
            name: string,
            limit: BigNumberish,
            price: BigNumberish,
            prefixUri: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        approve(
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        balanceOf(
            owner: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        buy(
            boxTypeId: BigNumberish,
            merkleProof: BytesLike[],
            agency: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        claim(
            boxId: BigNumberish,
            slimeInfo: {
                name: string;
                firstOwner: string;
                purity: boolean;
                blessed: BigNumberish;
                stellarUnlock: BigNumberish;
                markD: BigNumberish;
                markR: BigNumberish;
                faceD: BigNumberish;
                faceR: BigNumberish;
                wingsD: BigNumberish;
                wingsR: BigNumberish;
                bodyD: BigNumberish;
                bodyR: BigNumberish;
                upHeadD: BigNumberish;
                upHeadR: BigNumberish;
                siteHeadD: BigNumberish;
                siteHeadR: BigNumberish;
                tailD: BigNumberish;
                tailR: BigNumberish;
                breedCount: BigNumberish;
                essenceBreedCount: BigNumberish;
                parent1Id: BigNumberish;
                parent2Id: BigNumberish;
                lastBreed: BigNumberish;
                birthTime: BigNumberish;
            },
            signature: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        forceReturnERC20(
            token: string,
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        forceReturnERC721(
            sendTo: string,
            token: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        forceReturnNative(
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        getApproved(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getBought(
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getBoxTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getNextBuyTime(
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isApprovedForAll(
            owner: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        mintMany(
            recipient: string,
            quantity: BigNumberish,
            _type: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        ownerOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "safeTransferFrom(address,address,uint256)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setInfo(
            currency: string,
            sellLimit: BigNumberish,
            limitPerUser: BigNumberish,
            preventTime: BigNumberish,
            startTime: BigNumberish,
            endTime: BigNumberish,
            checkWhitelist: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setSlimeNFT(
            slime: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setWhitelist(
            merkleRoot: BytesLike,
            CID: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        toggleBoxType(
            boxTypeId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        tokenURI(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        transferFrom(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        typeOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        updateTokenUri(
            itemType: BigNumberish,
            uri: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
