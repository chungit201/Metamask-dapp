/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IGOPoolInterface extends ethers.utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "OWNER_ROLE()": FunctionFragment;
        "buy(address,uint256,uint256,bytes32[])": FunctionFragment;
        "countOfs(uint8[])": FunctionFragment;
        "forceEndListing()": FunctionFragment;
        "forceReturnERC20(address,uint256,address)": FunctionFragment;
        "forceReturnERC721(address,address,uint256)": FunctionFragment;
        "forceReturnNative(uint256,address)": FunctionFragment;
        "getBought(address)": FunctionFragment;
        "getCurrentPercent()": FunctionFragment;
        "getInfo()": FunctionFragment;
        "getLastBoughtTime()": FunctionFragment;
        "getListing(uint256)": FunctionFragment;
        "getListingByNFT(address,uint256)": FunctionFragment;
        "getReverseConfig()": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getTotal()": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "isPreTypeSoldOut()": FunctionFragment;
        "listMany(uint256[],uint8,uint256,uint32,bool)": FunctionFragment;
        "name()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setChainVerseTeam(address)": FunctionFragment;
        "setInfo(address,address,uint8,uint256,uint256,bytes32,string,address,bool,bool)": FunctionFragment;
        "setPreTypeSoldOut(bool)": FunctionFragment;
        "setReverseConfig(tuple)": FunctionFragment;
        "setWhitelist(bytes32,string)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "unList(uint256)": FunctionFragment;
        "withdrawProfit()": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "OWNER_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "buy",
        values: [string, BigNumberish, BigNumberish, BytesLike[]]
    ): string;
    encodeFunctionData(
        functionFragment: "countOfs",
        values: [BigNumberish[]]
    ): string;
    encodeFunctionData(
        functionFragment: "forceEndListing",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "forceReturnERC20",
        values: [string, BigNumberish, string]
    ): string;
    encodeFunctionData(
        functionFragment: "forceReturnERC721",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "forceReturnNative",
        values: [BigNumberish, string]
    ): string;
    encodeFunctionData(functionFragment: "getBought", values: [string]): string;
    encodeFunctionData(
        functionFragment: "getCurrentPercent",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getLastBoughtTime",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getListing",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getListingByNFT",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getReverseConfig",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleAdmin",
        values: [BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "getTotal", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "isPreTypeSoldOut",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "listMany",
        values: [BigNumberish[], BigNumberish, BigNumberish, BigNumberish, boolean]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "setChainVerseTeam",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "setInfo",
        values: [
            string,
            string,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BytesLike,
            string,
            string,
            boolean,
            boolean
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "setPreTypeSoldOut",
        values: [boolean]
    ): string;
    encodeFunctionData(
        functionFragment: "setReverseConfig",
        values: [
            {
                startPercent: BigNumberish;
                minPercent: BigNumberish;
                increasePercent: BigNumberish;
            }
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "setWhitelist",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "supportsInterface",
        values: [BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "unList",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "withdrawProfit",
        values?: undefined
    ): string;

    decodeFunctionResult(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "countOfs", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "forceEndListing",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "forceReturnERC20",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "forceReturnERC721",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "forceReturnNative",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getBought", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getCurrentPercent",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getLastBoughtTime",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getListingByNFT",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getReverseConfig",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleAdmin",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getTotal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "isPreTypeSoldOut",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "listMany", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "renounceRole",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "setChainVerseTeam",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "setPreTypeSoldOut",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setReverseConfig",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setWhitelist",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "supportsInterface",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "unList", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "withdrawProfit",
        data: BytesLike
    ): Result;

    events: {
        "ForceReturn(bool)": EventFragment;
        "Listed(uint256,address,uint256,uint8)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetChainVerseTeam(address)": EventFragment;
        "SetInfo(address,address,uint8,uint256,uint256,bytes32,string,address,bool,bool)": EventFragment;
        "SetPreTypeSoldOut(bool)": EventFragment;
        "SetReverseConfig(tuple)": EventFragment;
        "SetWhitelist(bytes32,string)": EventFragment;
        "Sold(uint256,address,uint256,address,address)": EventFragment;
        "Unlisted(uint256)": EventFragment;
        "WithdrawProfit(address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "ForceReturn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Listed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetChainVerseTeam"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetInfo"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPreTypeSoldOut"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetReverseConfig"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWhitelist"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unlisted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrawProfit"): EventFragment;
}

export class IGOPool extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: IGOPoolInterface;

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

        buy(
            agency: string,
            listingId: BigNumberish,
            price: BigNumberish,
            merkleProof: BytesLike[],
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        countOfs(
            itemType: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<
            [BigNumber[], BigNumber] & { countOf: BigNumber[]; total: BigNumber }
            >;

        forceEndListing(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        forceReturnERC20(
            token: string,
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        forceReturnERC721(
            sendTo: string,
            token: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        forceReturnNative(
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        getBought(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        getCurrentPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

        getInfo(
            overrides?: CallOverrides
        ): Promise<
            [
                    [
                        boolean,
                        boolean,
                        number,
                        string,
                        string,
                        string,
                        string,
                        string,
                        BigNumber,
                        BigNumber
                    ] & {
                    isBox: boolean;
                    isReverse: boolean;
                    maxBought: number;
                    merkleRoot: string;
                    CID: string;
                    nft: string;
                    owner: string;
                    currency: string;
                    startTimestamp: BigNumber;
                    endTimestamp: BigNumber;
                }
            ]
            >;

        getLastBoughtTime(overrides?: CallOverrides): Promise<[BigNumber]>;

        getListing(
            listingId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [
                    [
                        boolean,
                        boolean,
                        string,
                        string,
                        string,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber
                    ] & {
                    isEnded: boolean;
                    canBuy: boolean;
                    nft: string;
                    currency: string;
                    owner: string;
                    itemType: BigNumber;
                    tokenId: BigNumber;
                    fee: BigNumber;
                    price: BigNumber;
                    currentPrice: BigNumber;
                    id: BigNumber;
                }
            ] & {
            listing: [
                boolean,
                boolean,
                string,
                string,
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
            ] & {
                isEnded: boolean;
                canBuy: boolean;
                nft: string;
                currency: string;
                owner: string;
                itemType: BigNumber;
                tokenId: BigNumber;
                fee: BigNumber;
                price: BigNumber;
                currentPrice: BigNumber;
                id: BigNumber;
            };
        }
            >;

        getListingByNFT(
            nft: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [
                    [
                        boolean,
                        boolean,
                        string,
                        string,
                        string,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber,
                        BigNumber
                    ] & {
                    isEnded: boolean;
                    canBuy: boolean;
                    nft: string;
                    currency: string;
                    owner: string;
                    itemType: BigNumber;
                    tokenId: BigNumber;
                    fee: BigNumber;
                    price: BigNumber;
                    currentPrice: BigNumber;
                    id: BigNumber;
                }
            ] & {
            listing: [
                boolean,
                boolean,
                string,
                string,
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
            ] & {
                isEnded: boolean;
                canBuy: boolean;
                nft: string;
                currency: string;
                owner: string;
                itemType: BigNumber;
                tokenId: BigNumber;
                fee: BigNumber;
                price: BigNumber;
                currentPrice: BigNumber;
                id: BigNumber;
            };
        }
            >;

        getReverseConfig(
            overrides?: CallOverrides
        ): Promise<
            [
                    [BigNumber, BigNumber, BigNumber] & {
                    startPercent: BigNumber;
                    minPercent: BigNumber;
                    increasePercent: BigNumber;
                }
            ]
            >;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

        getTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        isPreTypeSoldOut(overrides?: CallOverrides): Promise<[boolean]>;

        listMany(
            ids: BigNumberish[],
            itemType: BigNumberish,
            price: BigNumberish,
            fee: BigNumberish,
            isMinted: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        name(overrides?: CallOverrides): Promise<[string]>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setChainVerseTeam(
            chainVerseTeam: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setInfo(
            nft: string,
            currency: string,
            maxBought: BigNumberish,
            startTimestamp: BigNumberish,
            endTimestamp: BigNumberish,
            merkleRoot: BytesLike,
            CID: string,
            owner: string,
            isBox: boolean,
            isReverse: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setPreTypeSoldOut(
            _preTypeSold: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setReverseConfig(
            _reverseConfig: {
                startPercent: BigNumberish;
                minPercent: BigNumberish;
                increasePercent: BigNumberish;
            },
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setWhitelist(
            merkleRoot: BytesLike,
            CID: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        unList(
            listingId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        withdrawProfit(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    buy(
        agency: string,
        listingId: BigNumberish,
        price: BigNumberish,
        merkleProof: BytesLike[],
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countOfs(
        itemType: BigNumberish[],
        overrides?: CallOverrides
    ): Promise<
        [BigNumber[], BigNumber] & { countOf: BigNumber[]; total: BigNumber }
        >;

    forceEndListing(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceReturnERC20(
        token: string,
        amount: BigNumberish,
        sendTo: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceReturnERC721(
        sendTo: string,
        token: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceReturnNative(
        amount: BigNumberish,
        sendTo: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBought(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getInfo(
        overrides?: CallOverrides
    ): Promise<
        [
            boolean,
            boolean,
            number,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber
        ] & {
        isBox: boolean;
        isReverse: boolean;
        maxBought: number;
        merkleRoot: string;
        CID: string;
        nft: string;
        owner: string;
        currency: string;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
    }
        >;

    getLastBoughtTime(overrides?: CallOverrides): Promise<BigNumber>;

    getListing(
        listingId: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [
            boolean,
            boolean,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
        isEnded: boolean;
        canBuy: boolean;
        nft: string;
        currency: string;
        owner: string;
        itemType: BigNumber;
        tokenId: BigNumber;
        fee: BigNumber;
        price: BigNumber;
        currentPrice: BigNumber;
        id: BigNumber;
    }
        >;

    getListingByNFT(
        nft: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [
            boolean,
            boolean,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
        isEnded: boolean;
        canBuy: boolean;
        nft: string;
        currency: string;
        owner: string;
        itemType: BigNumber;
        tokenId: BigNumber;
        fee: BigNumber;
        price: BigNumber;
        currentPrice: BigNumber;
        id: BigNumber;
    }
        >;

    getReverseConfig(
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber, BigNumber] & {
        startPercent: BigNumber;
        minPercent: BigNumber;
        increasePercent: BigNumber;
    }
        >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTotal(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
    ): Promise<boolean>;

    isPreTypeSoldOut(overrides?: CallOverrides): Promise<boolean>;

    listMany(
        ids: BigNumberish[],
        itemType: BigNumberish,
        price: BigNumberish,
        fee: BigNumberish,
        isMinted: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<string>;

    renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainVerseTeam(
        chainVerseTeam: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInfo(
        nft: string,
        currency: string,
        maxBought: BigNumberish,
        startTimestamp: BigNumberish,
        endTimestamp: BigNumberish,
        merkleRoot: BytesLike,
        CID: string,
        owner: string,
        isBox: boolean,
        isReverse: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPreTypeSoldOut(
        _preTypeSold: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReverseConfig(
        _reverseConfig: {
            startPercent: BigNumberish;
            minPercent: BigNumberish;
            increasePercent: BigNumberish;
        },
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
        merkleRoot: BytesLike,
        CID: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
    ): Promise<boolean>;

    unList(
        listingId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProfit(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

        buy(
            agency: string,
            listingId: BigNumberish,
            price: BigNumberish,
            merkleProof: BytesLike[],
            overrides?: CallOverrides
        ): Promise<boolean>;

        countOfs(
            itemType: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<
            [BigNumber[], BigNumber] & { countOf: BigNumber[]; total: BigNumber }
            >;

        forceEndListing(overrides?: CallOverrides): Promise<void>;

        forceReturnERC20(
            token: string,
            amount: BigNumberish,
            sendTo: string,
            overrides?: CallOverrides
        ): Promise<void>;

        forceReturnERC721(
            sendTo: string,
            token: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        forceReturnNative(
            amount: BigNumberish,
            sendTo: string,
            overrides?: CallOverrides
        ): Promise<void>;

        getBought(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        getCurrentPercent(overrides?: CallOverrides): Promise<BigNumber>;

        getInfo(
            overrides?: CallOverrides
        ): Promise<
            [
                boolean,
                boolean,
                number,
                string,
                string,
                string,
                string,
                string,
                BigNumber,
                BigNumber
            ] & {
            isBox: boolean;
            isReverse: boolean;
            maxBought: number;
            merkleRoot: string;
            CID: string;
            nft: string;
            owner: string;
            currency: string;
            startTimestamp: BigNumber;
            endTimestamp: BigNumber;
        }
            >;

        getLastBoughtTime(overrides?: CallOverrides): Promise<BigNumber>;

        getListing(
            listingId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [
                boolean,
                boolean,
                string,
                string,
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
            ] & {
            isEnded: boolean;
            canBuy: boolean;
            nft: string;
            currency: string;
            owner: string;
            itemType: BigNumber;
            tokenId: BigNumber;
            fee: BigNumber;
            price: BigNumber;
            currentPrice: BigNumber;
            id: BigNumber;
        }
            >;

        getListingByNFT(
            nft: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [
                boolean,
                boolean,
                string,
                string,
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
            ] & {
            isEnded: boolean;
            canBuy: boolean;
            nft: string;
            currency: string;
            owner: string;
            itemType: BigNumber;
            tokenId: BigNumber;
            fee: BigNumber;
            price: BigNumber;
            currentPrice: BigNumber;
            id: BigNumber;
        }
            >;

        getReverseConfig(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber] & {
            startPercent: BigNumber;
            minPercent: BigNumber;
            increasePercent: BigNumber;
        }
            >;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

        getTotal(overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<boolean>;

        isPreTypeSoldOut(overrides?: CallOverrides): Promise<boolean>;

        listMany(
            ids: BigNumberish[],
            itemType: BigNumberish,
            price: BigNumberish,
            fee: BigNumberish,
            isMinted: boolean,
            overrides?: CallOverrides
        ): Promise<void>;

        name(overrides?: CallOverrides): Promise<string>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>;

        setChainVerseTeam(
            chainVerseTeam: string,
            overrides?: CallOverrides
        ): Promise<void>;

        setInfo(
            nft: string,
            currency: string,
            maxBought: BigNumberish,
            startTimestamp: BigNumberish,
            endTimestamp: BigNumberish,
            merkleRoot: BytesLike,
            CID: string,
            owner: string,
            isBox: boolean,
            isReverse: boolean,
            overrides?: CallOverrides
        ): Promise<boolean>;

        setPreTypeSoldOut(
            _preTypeSold: boolean,
            overrides?: CallOverrides
        ): Promise<void>;

        setReverseConfig(
            _reverseConfig: {
                startPercent: BigNumberish;
                minPercent: BigNumberish;
                increasePercent: BigNumberish;
            },
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber] & {
            startPercent: BigNumber;
            minPercent: BigNumber;
            increasePercent: BigNumber;
        }
            >;

        setWhitelist(
            merkleRoot: BytesLike,
            CID: string,
            overrides?: CallOverrides
        ): Promise<void>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<boolean>;

        unList(
            listingId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        withdrawProfit(overrides?: CallOverrides): Promise<boolean>;
    };

    filters: {
        ForceReturn(force?: null): TypedEventFilter<[boolean], { force: boolean }>;

        Listed(
            listingId?: null,
            nft?: null,
            tokenId?: null,
            itemType?: null
        ): TypedEventFilter<
            [BigNumber, string, BigNumber, number],
            {
                listingId: BigNumber;
                nft: string;
                tokenId: BigNumber;
                itemType: number;
            }
            >;

        RoleAdminChanged(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; previousAdminRole: string; newAdminRole: string }
            >;

        RoleGranted(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
            >;

        RoleRevoked(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
            >;

        SetChainVerseTeam(
            chainverseTeam?: null
        ): TypedEventFilter<[string], { chainverseTeam: string }>;

        SetInfo(
            nft?: null,
            currency?: null,
            maxBought?: null,
            startTimestamp?: null,
            endTimestamp?: null,
            merkleRoot?: null,
            CID?: null,
            owner?: null,
            isBox?: null,
            isReverse?: null
        ): TypedEventFilter<
            [
                string,
                string,
                number,
                BigNumber,
                BigNumber,
                string,
                string,
                string,
                boolean,
                boolean
            ],
            {
                nft: string;
                currency: string;
                maxBought: number;
                startTimestamp: BigNumber;
                endTimestamp: BigNumber;
                merkleRoot: string;
                CID: string;
                owner: string;
                isBox: boolean;
                isReverse: boolean;
            }
            >;

        SetPreTypeSoldOut(
            soldPrevious?: null
        ): TypedEventFilter<[boolean], { soldPrevious: boolean }>;

        SetReverseConfig(
            reveseConfig?: null
        ): TypedEventFilter<
            [
                    [BigNumber, BigNumber, BigNumber] & {
                    startPercent: BigNumber;
                    minPercent: BigNumber;
                    increasePercent: BigNumber;
                }
            ],
            {
                reveseConfig: [BigNumber, BigNumber, BigNumber] & {
                    startPercent: BigNumber;
                    minPercent: BigNumber;
                    increasePercent: BigNumber;
                };
            }
            >;

        SetWhitelist(
            merkleRoot?: null,
            CID?: null
        ): TypedEventFilter<[string, string], { merkleRoot: string; CID: string }>;

        Sold(
            listingId?: null,
            nft?: null,
            tokenId?: null,
            buyer?: null,
            agency?: null
        ): TypedEventFilter<
            [BigNumber, string, BigNumber, string, string],
            {
                listingId: BigNumber;
                nft: string;
                tokenId: BigNumber;
                buyer: string;
                agency: string;
            }
            >;

        Unlisted(
            listingId?: null
        ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

        WithdrawProfit(
            team?: null,
            amount?: null
        ): TypedEventFilter<
            [string, BigNumber],
            { team: string; amount: BigNumber }
            >;
    };

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        buy(
            agency: string,
            listingId: BigNumberish,
            price: BigNumberish,
            merkleProof: BytesLike[],
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        countOfs(
            itemType: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        forceEndListing(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        forceReturnERC20(
            token: string,
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        forceReturnERC721(
            sendTo: string,
            token: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        forceReturnNative(
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        getBought(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        getCurrentPercent(overrides?: CallOverrides): Promise<BigNumber>;

        getInfo(overrides?: CallOverrides): Promise<BigNumber>;

        getLastBoughtTime(overrides?: CallOverrides): Promise<BigNumber>;

        getListing(
            listingId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getListingByNFT(
            nft: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getReverseConfig(overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getTotal(overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isPreTypeSoldOut(overrides?: CallOverrides): Promise<BigNumber>;

        listMany(
            ids: BigNumberish[],
            itemType: BigNumberish,
            price: BigNumberish,
            fee: BigNumberish,
            isMinted: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setChainVerseTeam(
            chainVerseTeam: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setInfo(
            nft: string,
            currency: string,
            maxBought: BigNumberish,
            startTimestamp: BigNumberish,
            endTimestamp: BigNumberish,
            merkleRoot: BytesLike,
            CID: string,
            owner: string,
            isBox: boolean,
            isReverse: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setPreTypeSoldOut(
            _preTypeSold: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setReverseConfig(
            _reverseConfig: {
                startPercent: BigNumberish;
                minPercent: BigNumberish;
                increasePercent: BigNumberish;
            },
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setWhitelist(
            merkleRoot: BytesLike,
            CID: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        unList(
            listingId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        withdrawProfit(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        buy(
            agency: string,
            listingId: BigNumberish,
            price: BigNumberish,
            merkleProof: BytesLike[],
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        countOfs(
            itemType: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        forceEndListing(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        forceReturnERC20(
            token: string,
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        forceReturnERC721(
            sendTo: string,
            token: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        forceReturnNative(
            amount: BigNumberish,
            sendTo: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        getBought(
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getCurrentPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getLastBoughtTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getListing(
            listingId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getListingByNFT(
            nft: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getReverseConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isPreTypeSoldOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        listMany(
            ids: BigNumberish[],
            itemType: BigNumberish,
            price: BigNumberish,
            fee: BigNumberish,
            isMinted: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setChainVerseTeam(
            chainVerseTeam: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setInfo(
            nft: string,
            currency: string,
            maxBought: BigNumberish,
            startTimestamp: BigNumberish,
            endTimestamp: BigNumberish,
            merkleRoot: BytesLike,
            CID: string,
            owner: string,
            isBox: boolean,
            isReverse: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setPreTypeSoldOut(
            _preTypeSold: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setReverseConfig(
            _reverseConfig: {
                startPercent: BigNumberish;
                minPercent: BigNumberish;
                increasePercent: BigNumberish;
            },
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setWhitelist(
            merkleRoot: BytesLike,
            CID: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        unList(
            listingId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        withdrawProfit(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
