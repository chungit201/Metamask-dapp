/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	PayableOverrides,
	CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface MarketServiceV1Interface extends ethers.utils.Interface {
	functions: {
		'CREATE_AUCTION_TYPE_HASH()': FunctionFragment;
		'DEFAULT_ADMIN_ROLE()': FunctionFragment;
		'DOMAIN_TYPE_HASH()': FunctionFragment;
		'END_AUCTION_TYPE_HASH()': FunctionFragment;
		'LIST_TYPE_HASH()': FunctionFragment;
		'OPERATION_ROLE()': FunctionFragment;
		'OWNER_ROLE()': FunctionFragment;
		'UN_LIST_TYPE_HASH()': FunctionFragment;
		'bid(uint256,uint256)': FunctionFragment;
		'buy(uint256,uint256)': FunctionFragment;
		'createAuction(address,uint256,uint256,address,uint256)': FunctionFragment;
		'createAuctionBySig(address,uint256,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
		'cvWithdrawProfit(address,address)': FunctionFragment;
		'domainSeparator()': FunctionFragment;
		'endAuction(uint256)': FunctionFragment;
		'endAuctionBySig(uint256,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
		'forceEndListing()': FunctionFragment;
		'forceReturnERC20(address,uint256,address)': FunctionFragment;
		'forceReturnERC721(address,address,uint256)': FunctionFragment;
		'forceReturnNative(uint256,address)': FunctionFragment;
		'getAuction(uint256)': FunctionFragment;
		'getAuctionByNFT(address,uint256)': FunctionFragment;
		'getBidding(address)': FunctionFragment;
		'getByNFT(address,uint256)': FunctionFragment;
		'getCurrentBid(uint256,address)': FunctionFragment;
		'getListing(uint256)': FunctionFragment;
		'getListingByNFT(address,uint256)': FunctionFragment;
		'getProfit(address,address)': FunctionFragment;
		'getRoleAdmin(bytes32)': FunctionFragment;
		'grantRole(bytes32,address)': FunctionFragment;
		'hasRole(bytes32,address)': FunctionFragment;
		'initialize()': FunctionFragment;
		'list(address,uint256,uint256,address)': FunctionFragment;
		'listBySig(address,uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
		'listExists(address,uint256,address,uint256,address)': FunctionFragment;
		'name()': FunctionFragment;
		'nfts(address)': FunctionFragment;
		'nonces(address)': FunctionFragment;
		'profit(address,address)': FunctionFragment;
		'renounceRole(bytes32,address)': FunctionFragment;
		'revokeRole(bytes32,address)': FunctionFragment;
		'setChainVerseTeam(address)': FunctionFragment;
		'setCurrency(address,bool)': FunctionFragment;
		'setNFT(address,tuple)': FunctionFragment;
		'supportsInterface(bytes4)': FunctionFragment;
		'unList(uint256)': FunctionFragment;
		'unListBySig(uint256,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
		'updatePrice(uint256,uint256)': FunctionFragment;
		'withdraw(uint256,address)': FunctionFragment;
		'withdrawProfit(address,address)': FunctionFragment;
	};

	encodeFunctionData(functionFragment: 'CREATE_AUCTION_TYPE_HASH', values?: undefined): string;
	encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
	encodeFunctionData(functionFragment: 'DOMAIN_TYPE_HASH', values?: undefined): string;
	encodeFunctionData(functionFragment: 'END_AUCTION_TYPE_HASH', values?: undefined): string;
	encodeFunctionData(functionFragment: 'LIST_TYPE_HASH', values?: undefined): string;
	encodeFunctionData(functionFragment: 'OPERATION_ROLE', values?: undefined): string;
	encodeFunctionData(functionFragment: 'OWNER_ROLE', values?: undefined): string;
	encodeFunctionData(functionFragment: 'UN_LIST_TYPE_HASH', values?: undefined): string;
	encodeFunctionData(functionFragment: 'bid', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'buy', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(
		functionFragment: 'createAuction',
		values: [string, BigNumberish, BigNumberish, string, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: 'createAuctionBySig',
		values: [
			string,
			BigNumberish,
			BigNumberish,
			string,
			BigNumberish,
			BigNumberish,
			BigNumberish,
			BigNumberish,
			BytesLike,
			BytesLike
		]
	): string;
	encodeFunctionData(functionFragment: 'cvWithdrawProfit', values: [string, string]): string;
	encodeFunctionData(functionFragment: 'domainSeparator', values?: undefined): string;
	encodeFunctionData(functionFragment: 'endAuction', values: [BigNumberish]): string;
	encodeFunctionData(
		functionFragment: 'endAuctionBySig',
		values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
	): string;
	encodeFunctionData(functionFragment: 'forceEndListing', values?: undefined): string;
	encodeFunctionData(functionFragment: 'forceReturnERC20', values: [string, BigNumberish, string]): string;
	encodeFunctionData(functionFragment: 'forceReturnERC721', values: [string, string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'forceReturnNative', values: [BigNumberish, string]): string;
	encodeFunctionData(functionFragment: 'getAuction', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'getAuctionByNFT', values: [string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'getBidding', values: [string]): string;
	encodeFunctionData(functionFragment: 'getByNFT', values: [string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'getCurrentBid', values: [BigNumberish, string]): string;
	encodeFunctionData(functionFragment: 'getListing', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'getListingByNFT', values: [string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'getProfit', values: [string, string]): string;
	encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
	encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
	encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
	encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
	encodeFunctionData(functionFragment: 'list', values: [string, BigNumberish, BigNumberish, string]): string;
	encodeFunctionData(
		functionFragment: 'listBySig',
		values: [
			string,
			BigNumberish,
			BigNumberish,
			string,
			BigNumberish,
			BigNumberish,
			BigNumberish,
			BytesLike,
			BytesLike
		]
	): string;
	encodeFunctionData(
		functionFragment: 'listExists',
		values: [string, BigNumberish, string, BigNumberish, string]
	): string;
	encodeFunctionData(functionFragment: 'name', values?: undefined): string;
	encodeFunctionData(functionFragment: 'nfts', values: [string]): string;
	encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
	encodeFunctionData(functionFragment: 'profit', values: [string, string]): string;
	encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
	encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
	encodeFunctionData(functionFragment: 'setChainVerseTeam', values: [string]): string;
	encodeFunctionData(functionFragment: 'setCurrency', values: [string, boolean]): string;
	encodeFunctionData(
		functionFragment: 'setNFT',
		values: [
			string,
			{
				isSupport: boolean;
				listingFee: BigNumberish;
				auctionFee: BigNumberish;
				nftTeam: string;
				percentNFTTeam: BigNumberish;
			}
		]
	): string;
	encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
	encodeFunctionData(functionFragment: 'unList', values: [BigNumberish]): string;
	encodeFunctionData(
		functionFragment: 'unListBySig',
		values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
	): string;
	encodeFunctionData(functionFragment: 'updatePrice', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, string]): string;
	encodeFunctionData(functionFragment: 'withdrawProfit', values: [string, string]): string;

	decodeFunctionResult(functionFragment: 'CREATE_AUCTION_TYPE_HASH', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'DOMAIN_TYPE_HASH', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'END_AUCTION_TYPE_HASH', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'LIST_TYPE_HASH', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'OPERATION_ROLE', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'OWNER_ROLE', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'UN_LIST_TYPE_HASH', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'bid', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'createAuction', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'createAuctionBySig', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'cvWithdrawProfit', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'domainSeparator', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'endAuction', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'endAuctionBySig', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'forceEndListing', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'forceReturnERC20', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'forceReturnERC721', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'forceReturnNative', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getAuction', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getAuctionByNFT', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getBidding', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getByNFT', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getCurrentBid', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getListing', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getListingByNFT', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getProfit', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'list', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'listBySig', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'listExists', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'nfts', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'profit', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setChainVerseTeam', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setCurrency', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setNFT', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'unList', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'unListBySig', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updatePrice', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'withdrawProfit', data: BytesLike): Result;

	events: {
		'AddNFT(address,bool)': EventFragment;
		'Bid(uint256,address,uint256)': EventFragment;
		'Currency(address,bool)': EventFragment;
		'EndAuction(uint256)': EventFragment;
		'ForceReturn(bool)': EventFragment;
		'Listed(uint256,address,uint256,bool)': EventFragment;
		'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
		'RoleGranted(bytes32,address,address)': EventFragment;
		'RoleRevoked(bytes32,address,address)': EventFragment;
		'SetChainVerseTeam(address)': EventFragment;
		'SetCommunityTeam(address)': EventFragment;
		'SetNFT(address,tuple)': EventFragment;
		'SetPercentProfit(uint256)': EventFragment;
		'Sold(uint256,address,uint256,address,bool)': EventFragment;
		'Unlisted(uint256)': EventFragment;
		'UpdatePrice(uint256,uint256)': EventFragment;
		'Withdraw(uint256,address,address,uint256)': EventFragment;
		'WithdrawProfit(address,address,uint256,address)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'AddNFT'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Bid'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Currency'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'EndAuction'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'ForceReturn'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Listed'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetChainVerseTeam'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetCommunityTeam'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetNFT'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetPercentProfit'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Sold'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Unlisted'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'UpdatePrice'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'WithdrawProfit'): EventFragment;
}

export class MarketServiceV1 extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: MarketServiceV1Interface;

	functions: {
		CREATE_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

		DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

		DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

		END_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

		LIST_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

		OPERATION_ROLE(overrides?: CallOverrides): Promise<[string]>;

		OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

		UN_LIST_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

		bid(
			auctionId: BigNumberish,
			bidPrice: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		buy(
			listingId: BigNumberish,
			price: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		createAuction(
			nft: string,
			tokenId: BigNumberish,
			initValue: BigNumberish,
			currency: string,
			duration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		createAuctionBySig(
			nft: string,
			tokenId: BigNumberish,
			initValue: BigNumberish,
			currency: string,
			duration: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		cvWithdrawProfit(
			nft: string,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		domainSeparator(overrides?: CallOverrides): Promise<[string]>;

		endAuction(
			auctionId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		endAuctionBySig(
			auctionId: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		forceEndListing(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		forceReturnERC20(
			token: string,
			amount: BigNumberish,
			sendTo: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		forceReturnERC721(
			token: string,
			sendTo: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		forceReturnNative(
			amount: BigNumberish,
			sendTo: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		getAuction(
			auctionId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				[
					boolean,
					string,
					string,
					string,
					string,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber
				] & {
					isEnded: boolean;
					nft: string;
					winner: string;
					owner: string;
					currency: string;
					tokenId: BigNumber;
					fee: BigNumber;
					bid: BigNumber;
					bidDuration: BigNumber;
					end: BigNumber;
					id: BigNumber;
				}
			]
		>;

		getAuctionByNFT(
			nft: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				[
					boolean,
					string,
					string,
					string,
					string,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber
				] & {
					isEnded: boolean;
					nft: string;
					winner: string;
					owner: string;
					currency: string;
					tokenId: BigNumber;
					fee: BigNumber;
					bid: BigNumber;
					bidDuration: BigNumber;
					end: BigNumber;
					id: BigNumber;
				}
			]
		>;

		getBidding(
			buyer: string,
			overrides?: CallOverrides
		): Promise<
			[BigNumber[], BigNumber[]] & {
				auctionIds: BigNumber[];
				amounts: BigNumber[];
			}
		>;

		getByNFT(
			nft: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				[
					boolean,
					string,
					string,
					string,
					string,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber
				] & {
					isEnded: boolean;
					nft: string;
					winner: string;
					owner: string;
					currency: string;
					tokenId: BigNumber;
					fee: BigNumber;
					bid: BigNumber;
					bidDuration: BigNumber;
					end: BigNumber;
					id: BigNumber;
				},
				[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
					isEnded: boolean;
					nft: string;
					currency: string;
					owner: string;
					tokenId: BigNumber;
					fee: BigNumber;
					price: BigNumber;
					id: BigNumber;
				}
			] & {
				auction: [
					boolean,
					string,
					string,
					string,
					string,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber
				] & {
					isEnded: boolean;
					nft: string;
					winner: string;
					owner: string;
					currency: string;
					tokenId: BigNumber;
					fee: BigNumber;
					bid: BigNumber;
					bidDuration: BigNumber;
					end: BigNumber;
					id: BigNumber;
				};
				listing: [boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
					isEnded: boolean;
					nft: string;
					currency: string;
					owner: string;
					tokenId: BigNumber;
					fee: BigNumber;
					price: BigNumber;
					id: BigNumber;
				};
			}
		>;

		getCurrentBid(auctionId: BigNumberish, bidder: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		getListing(
			listingId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
					isEnded: boolean;
					nft: string;
					currency: string;
					owner: string;
					tokenId: BigNumber;
					fee: BigNumber;
					price: BigNumber;
					id: BigNumber;
				}
			]
		>;

		getListingByNFT(
			nft: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
					isEnded: boolean;
					nft: string;
					currency: string;
					owner: string;
					tokenId: BigNumber;
					fee: BigNumber;
					price: BigNumber;
					id: BigNumber;
				}
			]
		>;

		getProfit(nft: string, currency: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

		grantRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

		initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		list(
			nft: string,
			tokenId: BigNumberish,
			price: BigNumberish,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		listBySig(
			nft: string,
			tokenId: BigNumberish,
			price: BigNumberish,
			currency: string,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		listExists(
			nft: string,
			tokenId: BigNumberish,
			currency: string,
			price: BigNumberish,
			fundReceiver: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		name(overrides?: CallOverrides): Promise<[string]>;

		nfts(
			arg0: string,
			overrides?: CallOverrides
		): Promise<
			[boolean, BigNumber, BigNumber, string, BigNumber] & {
				isSupport: boolean;
				listingFee: BigNumber;
				auctionFee: BigNumber;
				nftTeam: string;
				percentNFTTeam: BigNumber;
			}
		>;

		nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		profit(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<
			[BigNumber, BigNumber, BigNumber] & {
				amount: BigNumber;
				chainVerseTeam: BigNumber;
				nftTeam: BigNumber;
			}
		>;

		renounceRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		revokeRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setChainVerseTeam(
			chainVerseTeam: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setCurrency(
			currency: string,
			state: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setNFT(
			nft: string,
			nftSetting: {
				isSupport: boolean;
				listingFee: BigNumberish;
				auctionFee: BigNumberish;
				nftTeam: string;
				percentNFTTeam: BigNumberish;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

		unList(
			listingId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		unListBySig(
			listingId: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		updatePrice(
			listingId: BigNumberish,
			price: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		withdraw(
			auctionId: BigNumberish,
			bidder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		withdrawProfit(
			nft: string,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;
	};

	CREATE_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

	DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

	DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

	END_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

	LIST_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

	OPERATION_ROLE(overrides?: CallOverrides): Promise<string>;

	OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

	UN_LIST_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

	bid(
		auctionId: BigNumberish,
		bidPrice: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	buy(
		listingId: BigNumberish,
		price: BigNumberish,
		overrides?: PayableOverrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	createAuction(
		nft: string,
		tokenId: BigNumberish,
		initValue: BigNumberish,
		currency: string,
		duration: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	createAuctionBySig(
		nft: string,
		tokenId: BigNumberish,
		initValue: BigNumberish,
		currency: string,
		duration: BigNumberish,
		nonce: BigNumberish,
		expiry: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	cvWithdrawProfit(
		nft: string,
		currency: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	domainSeparator(overrides?: CallOverrides): Promise<string>;

	endAuction(
		auctionId: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	endAuctionBySig(
		auctionId: BigNumberish,
		nonce: BigNumberish,
		expiry: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	forceEndListing(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	forceReturnERC20(
		token: string,
		amount: BigNumberish,
		sendTo: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	forceReturnERC721(
		token: string,
		sendTo: string,
		tokenId: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	forceReturnNative(
		amount: BigNumberish,
		sendTo: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	getAuction(
		auctionId: BigNumberish,
		overrides?: CallOverrides
	): Promise<
		[boolean, string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
			isEnded: boolean;
			nft: string;
			winner: string;
			owner: string;
			currency: string;
			tokenId: BigNumber;
			fee: BigNumber;
			bid: BigNumber;
			bidDuration: BigNumber;
			end: BigNumber;
			id: BigNumber;
		}
	>;

	getAuctionByNFT(
		nft: string,
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<
		[boolean, string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
			isEnded: boolean;
			nft: string;
			winner: string;
			owner: string;
			currency: string;
			tokenId: BigNumber;
			fee: BigNumber;
			bid: BigNumber;
			bidDuration: BigNumber;
			end: BigNumber;
			id: BigNumber;
		}
	>;

	getBidding(
		buyer: string,
		overrides?: CallOverrides
	): Promise<
		[BigNumber[], BigNumber[]] & {
			auctionIds: BigNumber[];
			amounts: BigNumber[];
		}
	>;

	getByNFT(
		nft: string,
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<
		[
			[
				boolean,
				string,
				string,
				string,
				string,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber
			] & {
				isEnded: boolean;
				nft: string;
				winner: string;
				owner: string;
				currency: string;
				tokenId: BigNumber;
				fee: BigNumber;
				bid: BigNumber;
				bidDuration: BigNumber;
				end: BigNumber;
				id: BigNumber;
			},
			[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
				isEnded: boolean;
				nft: string;
				currency: string;
				owner: string;
				tokenId: BigNumber;
				fee: BigNumber;
				price: BigNumber;
				id: BigNumber;
			}
		] & {
			auction: [
				boolean,
				string,
				string,
				string,
				string,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber
			] & {
				isEnded: boolean;
				nft: string;
				winner: string;
				owner: string;
				currency: string;
				tokenId: BigNumber;
				fee: BigNumber;
				bid: BigNumber;
				bidDuration: BigNumber;
				end: BigNumber;
				id: BigNumber;
			};
			listing: [boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
				isEnded: boolean;
				nft: string;
				currency: string;
				owner: string;
				tokenId: BigNumber;
				fee: BigNumber;
				price: BigNumber;
				id: BigNumber;
			};
		}
	>;

	getCurrentBid(auctionId: BigNumberish, bidder: string, overrides?: CallOverrides): Promise<BigNumber>;

	getListing(
		listingId: BigNumberish,
		overrides?: CallOverrides
	): Promise<
		[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
			isEnded: boolean;
			nft: string;
			currency: string;
			owner: string;
			tokenId: BigNumber;
			fee: BigNumber;
			price: BigNumber;
			id: BigNumber;
		}
	>;

	getListingByNFT(
		nft: string,
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<
		[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
			isEnded: boolean;
			nft: string;
			currency: string;
			owner: string;
			tokenId: BigNumber;
			fee: BigNumber;
			price: BigNumber;
			id: BigNumber;
		}
	>;

	getProfit(nft: string, currency: string, overrides?: CallOverrides): Promise<BigNumber>;

	getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

	grantRole(
		role: BytesLike,
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

	initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	list(
		nft: string,
		tokenId: BigNumberish,
		price: BigNumberish,
		currency: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	listBySig(
		nft: string,
		tokenId: BigNumberish,
		price: BigNumberish,
		currency: string,
		nonce: BigNumberish,
		expiry: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	listExists(
		nft: string,
		tokenId: BigNumberish,
		currency: string,
		price: BigNumberish,
		fundReceiver: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	name(overrides?: CallOverrides): Promise<string>;

	nfts(
		arg0: string,
		overrides?: CallOverrides
	): Promise<
		[boolean, BigNumber, BigNumber, string, BigNumber] & {
			isSupport: boolean;
			listingFee: BigNumber;
			auctionFee: BigNumber;
			nftTeam: string;
			percentNFTTeam: BigNumber;
		}
	>;

	nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

	profit(
		arg0: string,
		arg1: string,
		overrides?: CallOverrides
	): Promise<
		[BigNumber, BigNumber, BigNumber] & {
			amount: BigNumber;
			chainVerseTeam: BigNumber;
			nftTeam: BigNumber;
		}
	>;

	renounceRole(
		role: BytesLike,
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	revokeRole(
		role: BytesLike,
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setChainVerseTeam(
		chainVerseTeam: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setCurrency(
		currency: string,
		state: boolean,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setNFT(
		nft: string,
		nftSetting: {
			isSupport: boolean;
			listingFee: BigNumberish;
			auctionFee: BigNumberish;
			nftTeam: string;
			percentNFTTeam: BigNumberish;
		},
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

	unList(
		listingId: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	unListBySig(
		listingId: BigNumberish,
		nonce: BigNumberish,
		expiry: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	updatePrice(
		listingId: BigNumberish,
		price: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	withdraw(
		auctionId: BigNumberish,
		bidder: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	withdrawProfit(
		nft: string,
		currency: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	callStatic: {
		CREATE_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

		DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

		DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

		END_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

		LIST_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

		OPERATION_ROLE(overrides?: CallOverrides): Promise<string>;

		OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

		UN_LIST_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

		bid(auctionId: BigNumberish, bidPrice: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		buy(listingId: BigNumberish, price: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		createAuction(
			nft: string,
			tokenId: BigNumberish,
			initValue: BigNumberish,
			currency: string,
			duration: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		createAuctionBySig(
			nft: string,
			tokenId: BigNumberish,
			initValue: BigNumberish,
			currency: string,
			duration: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		cvWithdrawProfit(nft: string, currency: string, overrides?: CallOverrides): Promise<boolean>;

		domainSeparator(overrides?: CallOverrides): Promise<string>;

		endAuction(auctionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		endAuctionBySig(
			auctionId: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: CallOverrides
		): Promise<boolean>;

		forceEndListing(overrides?: CallOverrides): Promise<void>;

		forceReturnERC20(token: string, amount: BigNumberish, sendTo: string, overrides?: CallOverrides): Promise<void>;

		forceReturnERC721(
			token: string,
			sendTo: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		forceReturnNative(amount: BigNumberish, sendTo: string, overrides?: CallOverrides): Promise<void>;

		getAuction(
			auctionId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				boolean,
				string,
				string,
				string,
				string,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber
			] & {
				isEnded: boolean;
				nft: string;
				winner: string;
				owner: string;
				currency: string;
				tokenId: BigNumber;
				fee: BigNumber;
				bid: BigNumber;
				bidDuration: BigNumber;
				end: BigNumber;
				id: BigNumber;
			}
		>;

		getAuctionByNFT(
			nft: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				boolean,
				string,
				string,
				string,
				string,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber,
				BigNumber
			] & {
				isEnded: boolean;
				nft: string;
				winner: string;
				owner: string;
				currency: string;
				tokenId: BigNumber;
				fee: BigNumber;
				bid: BigNumber;
				bidDuration: BigNumber;
				end: BigNumber;
				id: BigNumber;
			}
		>;

		getBidding(
			buyer: string,
			overrides?: CallOverrides
		): Promise<
			[BigNumber[], BigNumber[]] & {
				auctionIds: BigNumber[];
				amounts: BigNumber[];
			}
		>;

		getByNFT(
			nft: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[
				[
					boolean,
					string,
					string,
					string,
					string,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber
				] & {
					isEnded: boolean;
					nft: string;
					winner: string;
					owner: string;
					currency: string;
					tokenId: BigNumber;
					fee: BigNumber;
					bid: BigNumber;
					bidDuration: BigNumber;
					end: BigNumber;
					id: BigNumber;
				},
				[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
					isEnded: boolean;
					nft: string;
					currency: string;
					owner: string;
					tokenId: BigNumber;
					fee: BigNumber;
					price: BigNumber;
					id: BigNumber;
				}
			] & {
				auction: [
					boolean,
					string,
					string,
					string,
					string,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber,
					BigNumber
				] & {
					isEnded: boolean;
					nft: string;
					winner: string;
					owner: string;
					currency: string;
					tokenId: BigNumber;
					fee: BigNumber;
					bid: BigNumber;
					bidDuration: BigNumber;
					end: BigNumber;
					id: BigNumber;
				};
				listing: [boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
					isEnded: boolean;
					nft: string;
					currency: string;
					owner: string;
					tokenId: BigNumber;
					fee: BigNumber;
					price: BigNumber;
					id: BigNumber;
				};
			}
		>;

		getCurrentBid(auctionId: BigNumberish, bidder: string, overrides?: CallOverrides): Promise<BigNumber>;

		getListing(
			listingId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
				isEnded: boolean;
				nft: string;
				currency: string;
				owner: string;
				tokenId: BigNumber;
				fee: BigNumber;
				price: BigNumber;
				id: BigNumber;
			}
		>;

		getListingByNFT(
			nft: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<
			[boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
				isEnded: boolean;
				nft: string;
				currency: string;
				owner: string;
				tokenId: BigNumber;
				fee: BigNumber;
				price: BigNumber;
				id: BigNumber;
			}
		>;

		getProfit(nft: string, currency: string, overrides?: CallOverrides): Promise<BigNumber>;

		getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

		grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

		hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

		initialize(overrides?: CallOverrides): Promise<void>;

		list(
			nft: string,
			tokenId: BigNumberish,
			price: BigNumberish,
			currency: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		listBySig(
			nft: string,
			tokenId: BigNumberish,
			price: BigNumberish,
			currency: string,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		listExists(
			nft: string,
			tokenId: BigNumberish,
			currency: string,
			price: BigNumberish,
			fundReceiver: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		name(overrides?: CallOverrides): Promise<string>;

		nfts(
			arg0: string,
			overrides?: CallOverrides
		): Promise<
			[boolean, BigNumber, BigNumber, string, BigNumber] & {
				isSupport: boolean;
				listingFee: BigNumber;
				auctionFee: BigNumber;
				nftTeam: string;
				percentNFTTeam: BigNumber;
			}
		>;

		nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		profit(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<
			[BigNumber, BigNumber, BigNumber] & {
				amount: BigNumber;
				chainVerseTeam: BigNumber;
				nftTeam: BigNumber;
			}
		>;

		renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

		revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

		setChainVerseTeam(chainVerseTeam: string, overrides?: CallOverrides): Promise<void>;

		setCurrency(currency: string, state: boolean, overrides?: CallOverrides): Promise<void>;

		setNFT(
			nft: string,
			nftSetting: {
				isSupport: boolean;
				listingFee: BigNumberish;
				auctionFee: BigNumberish;
				nftTeam: string;
				percentNFTTeam: BigNumberish;
			},
			overrides?: CallOverrides
		): Promise<void>;

		supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

		unList(listingId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		unListBySig(
			listingId: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: CallOverrides
		): Promise<boolean>;

		updatePrice(listingId: BigNumberish, price: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		withdraw(auctionId: BigNumberish, bidder: string, overrides?: CallOverrides): Promise<boolean>;

		withdrawProfit(nft: string, currency: string, overrides?: CallOverrides): Promise<boolean>;
	};

	filters: {
		AddNFT(nft?: null, status?: null): TypedEventFilter<[string, boolean], { nft: string; status: boolean }>;

		Bid(
			auctionId?: null,
			bidder?: null,
			amount?: null
		): TypedEventFilter<
			[BigNumber, string, BigNumber],
			{ auctionId: BigNumber; bidder: string; amount: BigNumber }
		>;

		Currency(
			currency?: null,
			status?: null
		): TypedEventFilter<[string, boolean], { currency: string; status: boolean }>;

		EndAuction(auctionId?: null): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

		ForceReturn(force?: null): TypedEventFilter<[boolean], { force: boolean }>;

		Listed(
			listingId?: null,
			nft?: string | null,
			tokenId?: null,
			auction?: null
		): TypedEventFilter<
			[BigNumber, string, BigNumber, boolean],
			{
				listingId: BigNumber;
				nft: string;
				tokenId: BigNumber;
				auction: boolean;
			}
		>;

		RoleAdminChanged(
			role?: BytesLike | null,
			previousAdminRole?: BytesLike | null,
			newAdminRole?: BytesLike | null
		): TypedEventFilter<
			[string, string, string],
			{ role: string; previousAdminRole: string; newAdminRole: string }
		>;

		RoleGranted(
			role?: BytesLike | null,
			account?: string | null,
			sender?: string | null
		): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>;

		RoleRevoked(
			role?: BytesLike | null,
			account?: string | null,
			sender?: string | null
		): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>;

		SetChainVerseTeam(chainverseTeam?: null): TypedEventFilter<[string], { chainverseTeam: string }>;

		SetCommunityTeam(communityTeam?: null): TypedEventFilter<[string], { communityTeam: string }>;

		SetNFT(
			nft?: null,
			listingFee?: null
		): TypedEventFilter<
			[
				string,
				[boolean, BigNumber, BigNumber, string, BigNumber] & {
					isSupport: boolean;
					listingFee: BigNumber;
					auctionFee: BigNumber;
					nftTeam: string;
					percentNFTTeam: BigNumber;
				}
			],
			{
				nft: string;
				listingFee: [boolean, BigNumber, BigNumber, string, BigNumber] & {
					isSupport: boolean;
					listingFee: BigNumber;
					auctionFee: BigNumber;
					nftTeam: string;
					percentNFTTeam: BigNumber;
				};
			}
		>;

		SetPercentProfit(
			percentChainVerseTeam?: null
		): TypedEventFilter<[BigNumber], { percentChainVerseTeam: BigNumber }>;

		Sold(
			listingId?: null,
			nft?: string | null,
			tokenId?: null,
			buyer?: null,
			auction?: null
		): TypedEventFilter<
			[BigNumber, string, BigNumber, string, boolean],
			{
				listingId: BigNumber;
				nft: string;
				tokenId: BigNumber;
				buyer: string;
				auction: boolean;
			}
		>;

		Unlisted(listingId?: null): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

		UpdatePrice(
			listingId?: null,
			price?: null
		): TypedEventFilter<[BigNumber, BigNumber], { listingId: BigNumber; price: BigNumber }>;

		Withdraw(
			auctionId?: null,
			bidder?: null,
			currency?: null,
			bid?: null
		): TypedEventFilter<
			[BigNumber, string, string, BigNumber],
			{ auctionId: BigNumber; bidder: string; currency: string; bid: BigNumber }
		>;

		WithdrawProfit(
			nft?: null,
			currency?: null,
			amount?: null,
			receiver?: null
		): TypedEventFilter<
			[string, string, BigNumber, string],
			{ nft: string; currency: string; amount: BigNumber; receiver: string }
		>;
	};

	estimateGas: {
		CREATE_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

		DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

		DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

		END_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

		LIST_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

		OPERATION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

		OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

		UN_LIST_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

		bid(
			auctionId: BigNumberish,
			bidPrice: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		buy(
			listingId: BigNumberish,
			price: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		createAuction(
			nft: string,
			tokenId: BigNumberish,
			initValue: BigNumberish,
			currency: string,
			duration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		createAuctionBySig(
			nft: string,
			tokenId: BigNumberish,
			initValue: BigNumberish,
			currency: string,
			duration: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		cvWithdrawProfit(
			nft: string,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

		endAuction(
			auctionId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		endAuctionBySig(
			auctionId: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		forceEndListing(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		forceReturnERC20(
			token: string,
			amount: BigNumberish,
			sendTo: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		forceReturnERC721(
			token: string,
			sendTo: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		forceReturnNative(
			amount: BigNumberish,
			sendTo: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		getAuction(auctionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		getAuctionByNFT(nft: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		getBidding(buyer: string, overrides?: CallOverrides): Promise<BigNumber>;

		getByNFT(nft: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		getCurrentBid(auctionId: BigNumberish, bidder: string, overrides?: CallOverrides): Promise<BigNumber>;

		getListing(listingId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		getListingByNFT(nft: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		getProfit(nft: string, currency: string, overrides?: CallOverrides): Promise<BigNumber>;

		getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		grantRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

		initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		list(
			nft: string,
			tokenId: BigNumberish,
			price: BigNumberish,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		listBySig(
			nft: string,
			tokenId: BigNumberish,
			price: BigNumberish,
			currency: string,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		listExists(
			nft: string,
			tokenId: BigNumberish,
			currency: string,
			price: BigNumberish,
			fundReceiver: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		name(overrides?: CallOverrides): Promise<BigNumber>;

		nfts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		profit(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

		renounceRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		revokeRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setChainVerseTeam(
			chainVerseTeam: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setCurrency(
			currency: string,
			state: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setNFT(
			nft: string,
			nftSetting: {
				isSupport: boolean;
				listingFee: BigNumberish;
				auctionFee: BigNumberish;
				nftTeam: string;
				percentNFTTeam: BigNumberish;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		unList(
			listingId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		unListBySig(
			listingId: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		updatePrice(
			listingId: BigNumberish,
			price: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		withdraw(
			auctionId: BigNumberish,
			bidder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		withdrawProfit(
			nft: string,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;
	};

	populateTransaction: {
		CREATE_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		END_AUCTION_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		LIST_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		OPERATION_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		UN_LIST_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		bid(
			auctionId: BigNumberish,
			bidPrice: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		buy(
			listingId: BigNumberish,
			price: BigNumberish,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		createAuction(
			nft: string,
			tokenId: BigNumberish,
			initValue: BigNumberish,
			currency: string,
			duration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		createAuctionBySig(
			nft: string,
			tokenId: BigNumberish,
			initValue: BigNumberish,
			currency: string,
			duration: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		cvWithdrawProfit(
			nft: string,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		endAuction(
			auctionId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		endAuctionBySig(
			auctionId: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		forceEndListing(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		forceReturnERC20(
			token: string,
			amount: BigNumberish,
			sendTo: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		forceReturnERC721(
			token: string,
			sendTo: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		forceReturnNative(
			amount: BigNumberish,
			sendTo: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		getAuction(auctionId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getAuctionByNFT(nft: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getBidding(buyer: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getByNFT(nft: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getCurrentBid(
			auctionId: BigNumberish,
			bidder: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		getListing(listingId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getListingByNFT(nft: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getProfit(nft: string, currency: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		grantRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		list(
			nft: string,
			tokenId: BigNumberish,
			price: BigNumberish,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		listBySig(
			nft: string,
			tokenId: BigNumberish,
			price: BigNumberish,
			currency: string,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		listExists(
			nft: string,
			tokenId: BigNumberish,
			currency: string,
			price: BigNumberish,
			fundReceiver: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		nfts(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		profit(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		renounceRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		revokeRole(
			role: BytesLike,
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setChainVerseTeam(
			chainVerseTeam: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setCurrency(
			currency: string,
			state: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setNFT(
			nft: string,
			nftSetting: {
				isSupport: boolean;
				listingFee: BigNumberish;
				auctionFee: BigNumberish;
				nftTeam: string;
				percentNFTTeam: BigNumberish;
			},
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		unList(
			listingId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		unListBySig(
			listingId: BigNumberish,
			nonce: BigNumberish,
			expiry: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		updatePrice(
			listingId: BigNumberish,
			price: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		withdraw(
			auctionId: BigNumberish,
			bidder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		withdrawProfit(
			nft: string,
			currency: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;
	};
}
