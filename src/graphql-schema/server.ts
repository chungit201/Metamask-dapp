/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  checkUserAllowBuy?: GQLQueryUserAllowBuy;
  getNonceSlime?: GQLResSlimeUserNonce;
  getListTokenByAddress?: GQLResListTokenByAddress;
  boxDetail?: GQLResBoxDetail;
  getNameSlime?: GQLResGetNameSlime;
  listNftOnMarket?: GQLResListNftOnMarket;
  detailNft?: GQLResDetailNft;
  filterInfo?: GQLResFilterInfo;
  loginDapp?: GQLResLoginDapp;
  getSlimeNonce?: GQLResGetSlimeNonce;
  getNotifications?: GQLResGetNotifications;
  getFilterPrice?: GQLResGetFilterPrice;
}

export interface GQLMutation {
  sendVerifyCode?: GQLResponseMutation;
  checkCodeVerify?: GQLResponseMutation;
  getNonce?: GQLResUserNonce;
  boxDetailPost?: GQLResBoxDetail;
  updateNameSlime?: GQLResUpdateNameSlime;
  readNotification?: GQLResReadNotification;
}

export interface GQLInputGetNoti {
  PageNumb?: number;
  PageSize?: number;
}

export interface GQLInputReadNotification {
  Values?: Array<number>;
}

export interface GQLFilterNftOnMarket {
  partner_id?: string;
  page?: number;
  page_size?: number;
  name?: string;
  currency?: string;
  price_min?: number;
  price_max?: number;
  types?: Array<string>;
  class_types?: Array<string>;
  stages?: Array<string>;
  breed_count_from?: number;
  breed_count_to?: number;
  willingness_from?: number;
  willingness_to?: number;
  adventure_time_from?: number;
  adventure_time_to?: number;
  friendship_from?: number;
  friendship_to?: number;
  sort_by?: string;
  sort_type?: string;
}

export interface GQLInputDetailNft {
  partner_id?: string;
  token_contract?: string;
  token_id?: string;
}

export interface GQLResReadNotification {
  success?: boolean;
  status?: number;
}

export interface GQLResGetNotifications {
  success?: boolean;
  status?: number;
  data?: GQLDataGetNotifications;
}

export interface GQLDataGetNotifications {
  total?: number;
  notifications?: Array<GQLNotification>;
}

export interface GQLNotification {
  id?: number;
  content?: string;
  origin?: string;
  sent_time?: number;
  is_unread?: boolean;
}

export interface GQLResGetSlimeNonce {
  success?: boolean;
  status?: number;
  data?: GQLSlimeNonce;
}

export interface GQLSlimeNonce {
  nonce?: string;
}

export interface GQLResLoginDapp {
  success?: boolean;
  status?: number;
  data?: GQLDataLoginDapp;
}

export interface GQLDataLoginDapp {
  user_id?: number;
  access_token?: string;
  wallet_address?: string;
  experience?: number;
  rank_point?: number;
  essence?: number;
  crystal?: number;
}

export interface GQLResFilterInfo {
  status?: number;
  success?: boolean;
  data?: GQLDataFilterInfo;
}

export interface GQLDataFilterInfo {
  filters?: Array<GQLFilterInfo | null>;
}

export interface GQLFilterInfo {
  filter_id?: number;
  filter_name?: string;
  types?: string;
  price?: GQLPriceInfo;
  adventure?: GQLAdventureInfo;
  willingness?: GQLWillingnessInfo;
  breed?: GQLBreedInfo;
  friendship?: GQLFriendshipInfo;
  classes?: string;
  stages?: string;
}

export interface GQLBreedInfo {
  min?: number;
  max?: number;
}

export interface GQLFriendshipInfo {
  min?: number;
  max?: number;
}

export interface GQLPriceInfo {
  min?: number;
  max?: number;
}

export interface GQLAdventureInfo {
  min?: number;
  max?: number;
}

export interface GQLWillingnessInfo {
  min?: number;
  max?: number;
}

export interface GQLResListNftOnMarket {
  error_code?: number;
  message?: string;
  data?: GQLDataListNftOnMarket;
}

export interface GQLResDetailNft {
  error_code?: number;
  message?: string;
  data?: GQLNftOnMarket;
}

export interface GQLDataListNftOnMarket {
  count?: number;
  rows?: Array<GQLNftOnMarket>;
}

export interface GQLNftOnMarket {
  owner?: GQLUser;
  token_id: string;
  nft?: string;
  auction?: number;
  type?: GQLType;
  categories?: Array<GQLCategory | null>;
  game?: GQLGame;
  bids?: Array<GQLBid | null>;
  histories?: Array<GQLHistory | null>;
  network: GQLNetwork;
  status: string;
  nft_supported: boolean;
  listing_id?: string;
  name: string;
  price: number;
  image_preview: string;
  attributes?: string;
  currency?: GQLCurrency;
}

export interface GQLNetwork {
  network: string;
  chain_id: number;
  name?: string;
}

export interface GQLGame {
  address: string;
  name: string;
  logo: string;
}

export interface GQLBid {
  price: number;
  bidder: GQLUser;
}

export interface GQLHistory {
  event: string;
  from: string;
  to: string;
  price: string;
  currency: string;
  created_at: string;
}

export interface GQLUser {
  address: string;
  username?: string;
  avatar?: string;
}

export interface GQLType {
  id: number;
  name: string;
}

export interface GQLResGetNameSlime {
  status?: number;
  success?: boolean;
  message?: string;
  data?: GQLDataGetNameSlime;
}

export interface GQLResUpdateNameSlime {
  status?: number;
  message?: string;
  success?: boolean;
}

export interface GQLDataGetNameSlime {
  name?: string;
}

export interface GQLResBoxDetail {
  status?: number;
  success?: boolean;
  data?: GQLDataBoxDetail;
  message?: string;
}

export interface GQLDataBoxDetail {
  boxId?: number;
  boxAttrs?: number;
  slimeAttrs?: string;
  signature?: string;
}

export interface GQLSlimeAttribute {
  name?: string;
  boxId?: string;
  firstOwner?: string;
  stellarUnlock?: number;
  breedCount?: number;
  essenceBreedCount?: number;
  purity?: boolean;
  blessed?: number;
  bodyD?: number;
  bodyR?: number;
  faceD?: number;
  faceR?: number;
  markD?: number;
  markR?: number;
  siteHeadD?: number;
  siteHeadR?: number;
  tailD?: number;
  tailR?: number;
  upHeadD?: number;
  upHeadR?: number;
  wingsD?: number;
  wingsR?: number;
  parent1Id?: number;
  parent2Id?: number;
}

export interface GQLbodySendCode {
  email: string;
  walletAddress: string;
}

export interface GQLbodyVerifyCode {
  email: string;
  code: string;
}

export interface GQLResponseMutation {
  statusCode?: number;
  message?: string;
}

export interface GQLQueryUserAllowBuy {
  error_code?: number;
  message?: string;
  data?: GQLQueryUserAllowBuyData;
}

export interface GQLQueryUserAllowBuyData {
  status: number;
  address: string;
  merkleProof: Array<string>;
}

export interface GQLResUserNonce {
  error_code?: number;
  message?: string;
  data?: GQLUserNonce;
}

export interface GQLUserNonce {
  nonce?: number;
  time?: number;
}

export interface GQLResSlimeUserNonce {
  statusCode?: number;
  message?: string;
  data?: GQLSlimeUserNonce;
}

export interface GQLSlimeUserNonce {
  nonce?: number;
  address?: string;
}

export interface GQLResListTokenByAddress {
  error_code?: number;
  message?: string;
  data?: GQLDataMyAsset;
}

export interface GQLDataMyAsset {
  count: number;
  rows?: Array<GQLItemMyAsset>;
}

export interface GQLItemMyAsset {
  id: string;
  nft: string;
  token_id?: number;
  token_uri?: string;
  name: string;
  image: string;
  asset: string;
  image_preview?: string;
  status?: string;
  type?: GQLItemType;
  categories?: Array<GQLCategory>;
  created_at?: string;
  listing_id?: number;
  auction?: boolean;
  price?: string;
  currency?: string;
  attributes?: string;
}

export interface GQLItemType {
  id: string;
  name: string;
}

export interface GQLCategory {
  id: number;
  name: string;
}

export interface GQLCurrency {
  symbol?: string;
  decimal?: number;
  currency?: string;
}

export interface GQLFilterPrice {
  partner_id?: string;
  nfts?: Array<string>;
}

export interface GQLResGetFilterPrice {
  error_code?: number;
  message?: string;
  data?: GQLDataFilterPrice;
}

export interface GQLDataFilterPrice {
  price_min?: number;
  price_max?: number;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  ResReadNotification?: GQLResReadNotificationTypeResolver;
  ResGetNotifications?: GQLResGetNotificationsTypeResolver;
  DataGetNotifications?: GQLDataGetNotificationsTypeResolver;
  Notification?: GQLNotificationTypeResolver;
  ResGetSlimeNonce?: GQLResGetSlimeNonceTypeResolver;
  SlimeNonce?: GQLSlimeNonceTypeResolver;
  ResLoginDapp?: GQLResLoginDappTypeResolver;
  DataLoginDapp?: GQLDataLoginDappTypeResolver;
  ResFilterInfo?: GQLResFilterInfoTypeResolver;
  DataFilterInfo?: GQLDataFilterInfoTypeResolver;
  FilterInfo?: GQLFilterInfoTypeResolver;
  BreedInfo?: GQLBreedInfoTypeResolver;
  FriendshipInfo?: GQLFriendshipInfoTypeResolver;
  PriceInfo?: GQLPriceInfoTypeResolver;
  AdventureInfo?: GQLAdventureInfoTypeResolver;
  WillingnessInfo?: GQLWillingnessInfoTypeResolver;
  ResListNftOnMarket?: GQLResListNftOnMarketTypeResolver;
  ResDetailNft?: GQLResDetailNftTypeResolver;
  DataListNftOnMarket?: GQLDataListNftOnMarketTypeResolver;
  NftOnMarket?: GQLNftOnMarketTypeResolver;
  Network?: GQLNetworkTypeResolver;
  Game?: GQLGameTypeResolver;
  Bid?: GQLBidTypeResolver;
  History?: GQLHistoryTypeResolver;
  User?: GQLUserTypeResolver;
  Type?: GQLTypeTypeResolver;
  ResGetNameSlime?: GQLResGetNameSlimeTypeResolver;
  ResUpdateNameSlime?: GQLResUpdateNameSlimeTypeResolver;
  DataGetNameSlime?: GQLDataGetNameSlimeTypeResolver;
  ResBoxDetail?: GQLResBoxDetailTypeResolver;
  DataBoxDetail?: GQLDataBoxDetailTypeResolver;
  SlimeAttribute?: GQLSlimeAttributeTypeResolver;
  ResponseMutation?: GQLResponseMutationTypeResolver;
  QueryUserAllowBuy?: GQLQueryUserAllowBuyTypeResolver;
  QueryUserAllowBuyData?: GQLQueryUserAllowBuyDataTypeResolver;
  ResUserNonce?: GQLResUserNonceTypeResolver;
  UserNonce?: GQLUserNonceTypeResolver;
  ResSlimeUserNonce?: GQLResSlimeUserNonceTypeResolver;
  SlimeUserNonce?: GQLSlimeUserNonceTypeResolver;
  ResListTokenByAddress?: GQLResListTokenByAddressTypeResolver;
  DataMyAsset?: GQLDataMyAssetTypeResolver;
  ItemMyAsset?: GQLItemMyAssetTypeResolver;
  ItemType?: GQLItemTypeTypeResolver;
  Category?: GQLCategoryTypeResolver;
  Currency?: GQLCurrencyTypeResolver;
  ResGetFilterPrice?: GQLResGetFilterPriceTypeResolver;
  DataFilterPrice?: GQLDataFilterPriceTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  checkUserAllowBuy?: QueryToCheckUserAllowBuyResolver<TParent>;
  getNonceSlime?: QueryToGetNonceSlimeResolver<TParent>;
  getListTokenByAddress?: QueryToGetListTokenByAddressResolver<TParent>;
  boxDetail?: QueryToBoxDetailResolver<TParent>;
  getNameSlime?: QueryToGetNameSlimeResolver<TParent>;
  listNftOnMarket?: QueryToListNftOnMarketResolver<TParent>;
  detailNft?: QueryToDetailNftResolver<TParent>;
  filterInfo?: QueryToFilterInfoResolver<TParent>;
  loginDapp?: QueryToLoginDappResolver<TParent>;
  getSlimeNonce?: QueryToGetSlimeNonceResolver<TParent>;
  getNotifications?: QueryToGetNotificationsResolver<TParent>;
  getFilterPrice?: QueryToGetFilterPriceResolver<TParent>;
}

export interface QueryToCheckUserAllowBuyArgs {
  cid?: string;
  root?: string;
  address?: string;
}
export interface QueryToCheckUserAllowBuyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCheckUserAllowBuyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetNonceSlimeArgs {
  address?: string;
}
export interface QueryToGetNonceSlimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetNonceSlimeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetListTokenByAddressArgs {
  nft?: string;
  nfts?: Array<string>;
}
export interface QueryToGetListTokenByAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetListTokenByAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBoxDetailArgs {
  nft?: string;
  token_id?: string;
}
export interface QueryToBoxDetailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBoxDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetNameSlimeArgs {
  nft_address?: string;
  token_id?: string;
}
export interface QueryToGetNameSlimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetNameSlimeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListNftOnMarketArgs {
  filter?: GQLFilterNftOnMarket;
}
export interface QueryToListNftOnMarketResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListNftOnMarketArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToDetailNftArgs {
  input?: GQLInputDetailNft;
}
export interface QueryToDetailNftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToDetailNftArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFilterInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLoginDappResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetSlimeNonceArgs {
  wallet_address?: string;
}
export interface QueryToGetSlimeNonceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetSlimeNonceArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetNotificationsArgs {
  input?: GQLInputGetNoti;
}
export interface QueryToGetNotificationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetNotificationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetFilterPriceArgs {
  input?: GQLFilterPrice;
}
export interface QueryToGetFilterPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetFilterPriceArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  sendVerifyCode?: MutationToSendVerifyCodeResolver<TParent>;
  checkCodeVerify?: MutationToCheckCodeVerifyResolver<TParent>;
  getNonce?: MutationToGetNonceResolver<TParent>;
  boxDetailPost?: MutationToBoxDetailPostResolver<TParent>;
  updateNameSlime?: MutationToUpdateNameSlimeResolver<TParent>;
  readNotification?: MutationToReadNotificationResolver<TParent>;
}

export interface MutationToSendVerifyCodeArgs {
  body?: GQLbodySendCode;
}
export interface MutationToSendVerifyCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendVerifyCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCheckCodeVerifyArgs {
  body?: GQLbodyVerifyCode;
}
export interface MutationToCheckCodeVerifyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCheckCodeVerifyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToGetNonceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBoxDetailPostArgs {
  BoxId?: string;
  Wallet?: string;
}
export interface MutationToBoxDetailPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBoxDetailPostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateNameSlimeArgs {
  nft_address?: string;
  token_id?: string;
  name?: string;
}
export interface MutationToUpdateNameSlimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateNameSlimeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToReadNotificationArgs {
  input?: GQLInputReadNotification;
}
export interface MutationToReadNotificationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToReadNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResReadNotificationTypeResolver<TParent = any> {
  success?: ResReadNotificationToSuccessResolver<TParent>;
  status?: ResReadNotificationToStatusResolver<TParent>;
}

export interface ResReadNotificationToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResReadNotificationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResGetNotificationsTypeResolver<TParent = any> {
  success?: ResGetNotificationsToSuccessResolver<TParent>;
  status?: ResGetNotificationsToStatusResolver<TParent>;
  data?: ResGetNotificationsToDataResolver<TParent>;
}

export interface ResGetNotificationsToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetNotificationsToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetNotificationsToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDataGetNotificationsTypeResolver<TParent = any> {
  total?: DataGetNotificationsToTotalResolver<TParent>;
  notifications?: DataGetNotificationsToNotificationsResolver<TParent>;
}

export interface DataGetNotificationsToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataGetNotificationsToNotificationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNotificationTypeResolver<TParent = any> {
  id?: NotificationToIdResolver<TParent>;
  content?: NotificationToContentResolver<TParent>;
  origin?: NotificationToOriginResolver<TParent>;
  sent_time?: NotificationToSent_timeResolver<TParent>;
  is_unread?: NotificationToIs_unreadResolver<TParent>;
}

export interface NotificationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToOriginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToSent_timeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToIs_unreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResGetSlimeNonceTypeResolver<TParent = any> {
  success?: ResGetSlimeNonceToSuccessResolver<TParent>;
  status?: ResGetSlimeNonceToStatusResolver<TParent>;
  data?: ResGetSlimeNonceToDataResolver<TParent>;
}

export interface ResGetSlimeNonceToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetSlimeNonceToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetSlimeNonceToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSlimeNonceTypeResolver<TParent = any> {
  nonce?: SlimeNonceToNonceResolver<TParent>;
}

export interface SlimeNonceToNonceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResLoginDappTypeResolver<TParent = any> {
  success?: ResLoginDappToSuccessResolver<TParent>;
  status?: ResLoginDappToStatusResolver<TParent>;
  data?: ResLoginDappToDataResolver<TParent>;
}

export interface ResLoginDappToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResLoginDappToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResLoginDappToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDataLoginDappTypeResolver<TParent = any> {
  user_id?: DataLoginDappToUser_idResolver<TParent>;
  access_token?: DataLoginDappToAccess_tokenResolver<TParent>;
  wallet_address?: DataLoginDappToWallet_addressResolver<TParent>;
  experience?: DataLoginDappToExperienceResolver<TParent>;
  rank_point?: DataLoginDappToRank_pointResolver<TParent>;
  essence?: DataLoginDappToEssenceResolver<TParent>;
  crystal?: DataLoginDappToCrystalResolver<TParent>;
}

export interface DataLoginDappToUser_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataLoginDappToAccess_tokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataLoginDappToWallet_addressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataLoginDappToExperienceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataLoginDappToRank_pointResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataLoginDappToEssenceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataLoginDappToCrystalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResFilterInfoTypeResolver<TParent = any> {
  status?: ResFilterInfoToStatusResolver<TParent>;
  success?: ResFilterInfoToSuccessResolver<TParent>;
  data?: ResFilterInfoToDataResolver<TParent>;
}

export interface ResFilterInfoToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResFilterInfoToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResFilterInfoToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDataFilterInfoTypeResolver<TParent = any> {
  filters?: DataFilterInfoToFiltersResolver<TParent>;
}

export interface DataFilterInfoToFiltersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFilterInfoTypeResolver<TParent = any> {
  filter_id?: FilterInfoToFilter_idResolver<TParent>;
  filter_name?: FilterInfoToFilter_nameResolver<TParent>;
  types?: FilterInfoToTypesResolver<TParent>;
  price?: FilterInfoToPriceResolver<TParent>;
  adventure?: FilterInfoToAdventureResolver<TParent>;
  willingness?: FilterInfoToWillingnessResolver<TParent>;
  breed?: FilterInfoToBreedResolver<TParent>;
  friendship?: FilterInfoToFriendshipResolver<TParent>;
  classes?: FilterInfoToClassesResolver<TParent>;
  stages?: FilterInfoToStagesResolver<TParent>;
}

export interface FilterInfoToFilter_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToFilter_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToAdventureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToWillingnessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToBreedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToFriendshipResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToClassesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilterInfoToStagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBreedInfoTypeResolver<TParent = any> {
  min?: BreedInfoToMinResolver<TParent>;
  max?: BreedInfoToMaxResolver<TParent>;
}

export interface BreedInfoToMinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreedInfoToMaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFriendshipInfoTypeResolver<TParent = any> {
  min?: FriendshipInfoToMinResolver<TParent>;
  max?: FriendshipInfoToMaxResolver<TParent>;
}

export interface FriendshipInfoToMinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FriendshipInfoToMaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPriceInfoTypeResolver<TParent = any> {
  min?: PriceInfoToMinResolver<TParent>;
  max?: PriceInfoToMaxResolver<TParent>;
}

export interface PriceInfoToMinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PriceInfoToMaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAdventureInfoTypeResolver<TParent = any> {
  min?: AdventureInfoToMinResolver<TParent>;
  max?: AdventureInfoToMaxResolver<TParent>;
}

export interface AdventureInfoToMinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdventureInfoToMaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWillingnessInfoTypeResolver<TParent = any> {
  min?: WillingnessInfoToMinResolver<TParent>;
  max?: WillingnessInfoToMaxResolver<TParent>;
}

export interface WillingnessInfoToMinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WillingnessInfoToMaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResListNftOnMarketTypeResolver<TParent = any> {
  error_code?: ResListNftOnMarketToError_codeResolver<TParent>;
  message?: ResListNftOnMarketToMessageResolver<TParent>;
  data?: ResListNftOnMarketToDataResolver<TParent>;
}

export interface ResListNftOnMarketToError_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResListNftOnMarketToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResListNftOnMarketToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResDetailNftTypeResolver<TParent = any> {
  error_code?: ResDetailNftToError_codeResolver<TParent>;
  message?: ResDetailNftToMessageResolver<TParent>;
  data?: ResDetailNftToDataResolver<TParent>;
}

export interface ResDetailNftToError_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResDetailNftToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResDetailNftToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDataListNftOnMarketTypeResolver<TParent = any> {
  count?: DataListNftOnMarketToCountResolver<TParent>;
  rows?: DataListNftOnMarketToRowsResolver<TParent>;
}

export interface DataListNftOnMarketToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataListNftOnMarketToRowsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNftOnMarketTypeResolver<TParent = any> {
  owner?: NftOnMarketToOwnerResolver<TParent>;
  token_id?: NftOnMarketToToken_idResolver<TParent>;
  nft?: NftOnMarketToNftResolver<TParent>;
  auction?: NftOnMarketToAuctionResolver<TParent>;
  type?: NftOnMarketToTypeResolver<TParent>;
  categories?: NftOnMarketToCategoriesResolver<TParent>;
  game?: NftOnMarketToGameResolver<TParent>;
  bids?: NftOnMarketToBidsResolver<TParent>;
  histories?: NftOnMarketToHistoriesResolver<TParent>;
  network?: NftOnMarketToNetworkResolver<TParent>;
  status?: NftOnMarketToStatusResolver<TParent>;
  nft_supported?: NftOnMarketToNft_supportedResolver<TParent>;
  listing_id?: NftOnMarketToListing_idResolver<TParent>;
  name?: NftOnMarketToNameResolver<TParent>;
  price?: NftOnMarketToPriceResolver<TParent>;
  image_preview?: NftOnMarketToImage_previewResolver<TParent>;
  attributes?: NftOnMarketToAttributesResolver<TParent>;
  currency?: NftOnMarketToCurrencyResolver<TParent>;
}

export interface NftOnMarketToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToToken_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToNftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToAuctionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToGameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToBidsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToHistoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToNetworkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToNft_supportedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToListing_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToImage_previewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NftOnMarketToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNetworkTypeResolver<TParent = any> {
  network?: NetworkToNetworkResolver<TParent>;
  chain_id?: NetworkToChain_idResolver<TParent>;
  name?: NetworkToNameResolver<TParent>;
}

export interface NetworkToNetworkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NetworkToChain_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NetworkToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGameTypeResolver<TParent = any> {
  address?: GameToAddressResolver<TParent>;
  name?: GameToNameResolver<TParent>;
  logo?: GameToLogoResolver<TParent>;
}

export interface GameToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBidTypeResolver<TParent = any> {
  price?: BidToPriceResolver<TParent>;
  bidder?: BidToBidderResolver<TParent>;
}

export interface BidToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BidToBidderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHistoryTypeResolver<TParent = any> {
  event?: HistoryToEventResolver<TParent>;
  from?: HistoryToFromResolver<TParent>;
  to?: HistoryToToResolver<TParent>;
  price?: HistoryToPriceResolver<TParent>;
  currency?: HistoryToCurrencyResolver<TParent>;
  created_at?: HistoryToCreated_atResolver<TParent>;
}

export interface HistoryToEventResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HistoryToFromResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HistoryToToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HistoryToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HistoryToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HistoryToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  address?: UserToAddressResolver<TParent>;
  username?: UserToUsernameResolver<TParent>;
  avatar?: UserToAvatarResolver<TParent>;
}

export interface UserToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTypeTypeResolver<TParent = any> {
  id?: TypeToIdResolver<TParent>;
  name?: TypeToNameResolver<TParent>;
}

export interface TypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TypeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResGetNameSlimeTypeResolver<TParent = any> {
  status?: ResGetNameSlimeToStatusResolver<TParent>;
  success?: ResGetNameSlimeToSuccessResolver<TParent>;
  message?: ResGetNameSlimeToMessageResolver<TParent>;
  data?: ResGetNameSlimeToDataResolver<TParent>;
}

export interface ResGetNameSlimeToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetNameSlimeToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetNameSlimeToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetNameSlimeToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResUpdateNameSlimeTypeResolver<TParent = any> {
  status?: ResUpdateNameSlimeToStatusResolver<TParent>;
  message?: ResUpdateNameSlimeToMessageResolver<TParent>;
  success?: ResUpdateNameSlimeToSuccessResolver<TParent>;
}

export interface ResUpdateNameSlimeToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResUpdateNameSlimeToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResUpdateNameSlimeToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDataGetNameSlimeTypeResolver<TParent = any> {
  name?: DataGetNameSlimeToNameResolver<TParent>;
}

export interface DataGetNameSlimeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResBoxDetailTypeResolver<TParent = any> {
  status?: ResBoxDetailToStatusResolver<TParent>;
  success?: ResBoxDetailToSuccessResolver<TParent>;
  data?: ResBoxDetailToDataResolver<TParent>;
  message?: ResBoxDetailToMessageResolver<TParent>;
}

export interface ResBoxDetailToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResBoxDetailToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResBoxDetailToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResBoxDetailToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDataBoxDetailTypeResolver<TParent = any> {
  boxId?: DataBoxDetailToBoxIdResolver<TParent>;
  boxAttrs?: DataBoxDetailToBoxAttrsResolver<TParent>;
  slimeAttrs?: DataBoxDetailToSlimeAttrsResolver<TParent>;
  signature?: DataBoxDetailToSignatureResolver<TParent>;
}

export interface DataBoxDetailToBoxIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataBoxDetailToBoxAttrsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataBoxDetailToSlimeAttrsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataBoxDetailToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSlimeAttributeTypeResolver<TParent = any> {
  name?: SlimeAttributeToNameResolver<TParent>;
  boxId?: SlimeAttributeToBoxIdResolver<TParent>;
  firstOwner?: SlimeAttributeToFirstOwnerResolver<TParent>;
  stellarUnlock?: SlimeAttributeToStellarUnlockResolver<TParent>;
  breedCount?: SlimeAttributeToBreedCountResolver<TParent>;
  essenceBreedCount?: SlimeAttributeToEssenceBreedCountResolver<TParent>;
  purity?: SlimeAttributeToPurityResolver<TParent>;
  blessed?: SlimeAttributeToBlessedResolver<TParent>;
  bodyD?: SlimeAttributeToBodyDResolver<TParent>;
  bodyR?: SlimeAttributeToBodyRResolver<TParent>;
  faceD?: SlimeAttributeToFaceDResolver<TParent>;
  faceR?: SlimeAttributeToFaceRResolver<TParent>;
  markD?: SlimeAttributeToMarkDResolver<TParent>;
  markR?: SlimeAttributeToMarkRResolver<TParent>;
  siteHeadD?: SlimeAttributeToSiteHeadDResolver<TParent>;
  siteHeadR?: SlimeAttributeToSiteHeadRResolver<TParent>;
  tailD?: SlimeAttributeToTailDResolver<TParent>;
  tailR?: SlimeAttributeToTailRResolver<TParent>;
  upHeadD?: SlimeAttributeToUpHeadDResolver<TParent>;
  upHeadR?: SlimeAttributeToUpHeadRResolver<TParent>;
  wingsD?: SlimeAttributeToWingsDResolver<TParent>;
  wingsR?: SlimeAttributeToWingsRResolver<TParent>;
  parent1Id?: SlimeAttributeToParent1IdResolver<TParent>;
  parent2Id?: SlimeAttributeToParent2IdResolver<TParent>;
}

export interface SlimeAttributeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToBoxIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToFirstOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToStellarUnlockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToBreedCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToEssenceBreedCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToPurityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToBlessedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToBodyDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToBodyRResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToFaceDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToFaceRResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToMarkDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToMarkRResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToSiteHeadDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToSiteHeadRResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToTailDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToTailRResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToUpHeadDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToUpHeadRResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToWingsDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToWingsRResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToParent1IdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeAttributeToParent2IdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResponseMutationTypeResolver<TParent = any> {
  statusCode?: ResponseMutationToStatusCodeResolver<TParent>;
  message?: ResponseMutationToMessageResolver<TParent>;
}

export interface ResponseMutationToStatusCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResponseMutationToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLQueryUserAllowBuyTypeResolver<TParent = any> {
  error_code?: QueryUserAllowBuyToError_codeResolver<TParent>;
  message?: QueryUserAllowBuyToMessageResolver<TParent>;
  data?: QueryUserAllowBuyToDataResolver<TParent>;
}

export interface QueryUserAllowBuyToError_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryUserAllowBuyToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryUserAllowBuyToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLQueryUserAllowBuyDataTypeResolver<TParent = any> {
  status?: QueryUserAllowBuyDataToStatusResolver<TParent>;
  address?: QueryUserAllowBuyDataToAddressResolver<TParent>;
  merkleProof?: QueryUserAllowBuyDataToMerkleProofResolver<TParent>;
}

export interface QueryUserAllowBuyDataToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryUserAllowBuyDataToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryUserAllowBuyDataToMerkleProofResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResUserNonceTypeResolver<TParent = any> {
  error_code?: ResUserNonceToError_codeResolver<TParent>;
  message?: ResUserNonceToMessageResolver<TParent>;
  data?: ResUserNonceToDataResolver<TParent>;
}

export interface ResUserNonceToError_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResUserNonceToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResUserNonceToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserNonceTypeResolver<TParent = any> {
  nonce?: UserNonceToNonceResolver<TParent>;
  time?: UserNonceToTimeResolver<TParent>;
}

export interface UserNonceToNonceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserNonceToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResSlimeUserNonceTypeResolver<TParent = any> {
  statusCode?: ResSlimeUserNonceToStatusCodeResolver<TParent>;
  message?: ResSlimeUserNonceToMessageResolver<TParent>;
  data?: ResSlimeUserNonceToDataResolver<TParent>;
}

export interface ResSlimeUserNonceToStatusCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResSlimeUserNonceToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResSlimeUserNonceToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSlimeUserNonceTypeResolver<TParent = any> {
  nonce?: SlimeUserNonceToNonceResolver<TParent>;
  address?: SlimeUserNonceToAddressResolver<TParent>;
}

export interface SlimeUserNonceToNonceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlimeUserNonceToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResListTokenByAddressTypeResolver<TParent = any> {
  error_code?: ResListTokenByAddressToError_codeResolver<TParent>;
  message?: ResListTokenByAddressToMessageResolver<TParent>;
  data?: ResListTokenByAddressToDataResolver<TParent>;
}

export interface ResListTokenByAddressToError_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResListTokenByAddressToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResListTokenByAddressToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDataMyAssetTypeResolver<TParent = any> {
  count?: DataMyAssetToCountResolver<TParent>;
  rows?: DataMyAssetToRowsResolver<TParent>;
}

export interface DataMyAssetToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataMyAssetToRowsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLItemMyAssetTypeResolver<TParent = any> {
  id?: ItemMyAssetToIdResolver<TParent>;
  nft?: ItemMyAssetToNftResolver<TParent>;
  token_id?: ItemMyAssetToToken_idResolver<TParent>;
  token_uri?: ItemMyAssetToToken_uriResolver<TParent>;
  name?: ItemMyAssetToNameResolver<TParent>;
  image?: ItemMyAssetToImageResolver<TParent>;
  asset?: ItemMyAssetToAssetResolver<TParent>;
  image_preview?: ItemMyAssetToImage_previewResolver<TParent>;
  status?: ItemMyAssetToStatusResolver<TParent>;
  type?: ItemMyAssetToTypeResolver<TParent>;
  categories?: ItemMyAssetToCategoriesResolver<TParent>;
  created_at?: ItemMyAssetToCreated_atResolver<TParent>;
  listing_id?: ItemMyAssetToListing_idResolver<TParent>;
  auction?: ItemMyAssetToAuctionResolver<TParent>;
  price?: ItemMyAssetToPriceResolver<TParent>;
  currency?: ItemMyAssetToCurrencyResolver<TParent>;
  attributes?: ItemMyAssetToAttributesResolver<TParent>;
}

export interface ItemMyAssetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToNftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToToken_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToToken_uriResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToAssetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToImage_previewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToListing_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToAuctionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemMyAssetToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLItemTypeTypeResolver<TParent = any> {
  id?: ItemTypeToIdResolver<TParent>;
  name?: ItemTypeToNameResolver<TParent>;
}

export interface ItemTypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemTypeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCategoryTypeResolver<TParent = any> {
  id?: CategoryToIdResolver<TParent>;
  name?: CategoryToNameResolver<TParent>;
}

export interface CategoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCurrencyTypeResolver<TParent = any> {
  symbol?: CurrencyToSymbolResolver<TParent>;
  decimal?: CurrencyToDecimalResolver<TParent>;
  currency?: CurrencyToCurrencyResolver<TParent>;
}

export interface CurrencyToSymbolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToDecimalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResGetFilterPriceTypeResolver<TParent = any> {
  error_code?: ResGetFilterPriceToError_codeResolver<TParent>;
  message?: ResGetFilterPriceToMessageResolver<TParent>;
  data?: ResGetFilterPriceToDataResolver<TParent>;
}

export interface ResGetFilterPriceToError_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetFilterPriceToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResGetFilterPriceToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDataFilterPriceTypeResolver<TParent = any> {
  price_min?: DataFilterPriceToPrice_minResolver<TParent>;
  price_max?: DataFilterPriceToPrice_maxResolver<TParent>;
}

export interface DataFilterPriceToPrice_minResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataFilterPriceToPrice_maxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
